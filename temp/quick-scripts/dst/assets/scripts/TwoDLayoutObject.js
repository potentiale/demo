
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/TwoDLayoutObject.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '00dd8yH10tNC5mBY7yHKAYn', 'TwoDLayoutObject');
// scripts/TwoDLayoutObject.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
});

Object.defineProperty(o, "__esModule", {
  value: !0
}), o.TwoDLayoutObject = o.LAYOUT_VERTICAL_TYPE = o.LAYOUT_HORIZONTAL_TYPE = void 0;
var s,
    c,
    t = e("LayoutObject");
(e = s = o.LAYOUT_HORIZONTAL_TYPE || (o.LAYOUT_HORIZONTAL_TYPE = {}))[e.LEFT = 0] = "LEFT", e[e.RIGHT = 1] = "RIGHT", e[e.CENTER = 2] = "CENTER", (e = c = o.LAYOUT_VERTICAL_TYPE || (o.LAYOUT_VERTICAL_TYPE = {}))[e.CENTER = 0] = "CENTER", e[e.TOP = 1] = "TOP", e[e.BOTTOM = 2] = "BOTTOM";
var a,
    i = (a = t.LayoutObject, i(r, a), r.prototype.getRowByIndex = function (e) {
  return Math.floor(e / this.key_count);
}, r.prototype.getColumnByIndex = function (e) {
  return e % this.key_count;
}, r.prototype.rows = function () {
  return Math.ceil(this.count / this.key_count);
}, r.prototype.columns = function () {
  return this.count <= this.key_count - 1 ? this.count : this.key_count;
}, r.prototype.getBoundingRect = function () {
  var e = this.rows(),
      t = this.columns(),
      e = e * this.item_size.y + (e - 1) * this.space.y + this.top + this.bottom,
      t = t * this.item_size.x + (t - 1) * this.space.x + this.left + this.right;
  return new cc.Vec2(t, e);
}, r.prototype.getIndex = function (e, t) {
  return e * this.key_count + t;
}, r.prototype.doLayout = function (e) {
  var t = this.getRowByIndex(e),
      o = this.getColumnByIndex(e),
      n = 0,
      i = 0;

  switch (this.horizontal_layout_type) {
    case s.LEFT:
      n = this.left + o * (this.item_size.x + this.space.x) + this.item_anchor_point.x * this.item_size.x;
      break;

    case s.CENTER:
      n = 1 === this.key_count ? (a = (this.parent_size.x - this.item_size.x - this.left - this.right) / 2, this.left + a + this.item_anchor_point.x * this.item_size.x) : (a = (this.parent_size.x - (this.left + this.right) - this.key_count * this.item_size.x) / (this.key_count - 1), this.left + o * (this.item_size.x + a) + this.item_anchor_point.x * this.item_size.x);
      break;

    case s.RIGHT:
      var a = this.parent_size.x - this.getBoundingRect().x;
      n = this.left + o * (this.item_size.x + this.space.x) + this.item_anchor_point.x * this.item_size.x + a;
  }

  switch (this.vertical_layout_type) {
    case c.TOP:
      i = this.top + t * (this.item_size.y + this.space.y) + (1 - this.item_anchor_point.y) * this.item_size.y;
      break;

    case c.CENTER:
      i = 1 === this.key_count ? (r = (this.parent_size.y - this.item_size.y - this.top - this.bottom) / 2, this.top + r + (1 - this.item_anchor_point.y) * this.item_size.y) : (r = (this.parent_size.y - (this.top + this.bottom) - this.key_count * this.item_size.y) / (this.key_count - 1), this.top + t * (this.item_size.y + r) + (1 - this.item_anchor_point.y) * this.item_size.y);
      break;

    case c.BOTTOM:
      var r = this.parent_size.y - this.getBoundingRect().y;
      i = this.top + t * (this.item_size.y + this.space.y) + (1 - this.item_anchor_point.y) * this.item_size.y + r;
  }

  return new cc.Vec2(n, -i);
}, r);

function r() {
  var e = null !== a && a.apply(this, arguments) || this;
  return e.key_count = 0, e.item_size = cc.Vec2.ZERO, e.parent_size = cc.Vec2.ZERO, e.item_anchor_point = cc.Vec2.ZERO, e.count = 0, e.horizontal_layout_type = s.LEFT, e.vertical_layout_type = c.TOP, e.space = cc.Vec2.ZERO, e.left = 0, e.right = 0, e.top = 0, e.bottom = 0, e;
}

o.TwoDLayoutObject = i;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,