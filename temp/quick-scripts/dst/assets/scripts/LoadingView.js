
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/LoadingView.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4f728U4nGZIi60VL3CNFX+o', 'LoadingView');
// scripts/LoadingView.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    c = e("BaseSdk"),
    l = e("PlatformFun"),
    t = cc._decorator,
    e = t.ccclass,
    t = t.property,
    e = (r = cc.Component, i(p, r), p.prototype.onLoad = function () {
  this.node.children[0].children[0].active = s["default"].PF != c.GAMEPF.WX && !c.GAMEPF.isADR(), this.node.opacity = 255;
}, p.prototype.start = function () {
  var e = this;
  cc.tween(this.bar).to(s["default"].PF == c.GAMEPF.WEB ? .2 : 1.3, {
    progress: 1
  }).call(function () {
    cc.tween(e.node).to(.3, {
      opacity: 0
    }).call(function () {
      e.node.destroy(), s["default"].PF == c.GAMEPF.WX && l.PlatformFun.showBannerAd();
    }).start();
  }).start(), cc.resources.preloadDir("prefab/pop", cc.Prefab);
}, a([t(cc.ProgressBar)], p.prototype, "bar", void 0), a([e], p));

function p() {
  var e = null !== r && r.apply(this, arguments) || this;
  return e.bar = null, e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcTG9hZGluZ1ZpZXcuanMiXSwibmFtZXMiOlsiZSIsInJlcXVpcmUiLCJ0IiwibW9kdWxlIiwibyIsImV4cG9ydHMiLCJuIiwiaSIsIl9fZXh0ZW5kcyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsImEiLCJfX2RlY29yYXRlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsInMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiYyIsImwiLCJjYyIsIl9kZWNvcmF0b3IiLCJjY2NsYXNzIiwicHJvcGVydHkiLCJDb21wb25lbnQiLCJwIiwib25Mb2FkIiwibm9kZSIsImNoaWxkcmVuIiwiYWN0aXZlIiwiUEYiLCJHQU1FUEYiLCJXWCIsImlzQURSIiwib3BhY2l0eSIsInN0YXJ0IiwidHdlZW4iLCJiYXIiLCJ0byIsIldFQiIsInByb2dyZXNzIiwiZGVzdHJveSIsIlBsYXRmb3JtRnVuIiwic2hvd0Jhbm5lckFkIiwicmVzb3VyY2VzIiwicHJlbG9hZERpciIsIlByZWZhYiIsIlByb2dyZXNzQmFyIiwiYXBwbHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBQyxHQUFDQyxPQUFOO0FBQ0EsSUFBSUMsQ0FBQyxHQUFDQyxNQUFOO0FBQ0EsSUFBSUMsQ0FBQyxHQUFDQyxPQUFOO0FBQ0E7O0FBQWEsSUFBSUMsRUFBSjtBQUFBLElBQU1DLENBQUMsR0FBQyxVQUFNLFNBQUtDLFNBQVgsS0FBdUJGLEVBQUMsR0FBQyxXQUFTTixDQUFULEVBQVdFLENBQVgsRUFBYTtBQUFDLFNBQU0sQ0FBQ0ksRUFBQyxHQUFDRyxNQUFNLENBQUNDLGNBQVAsSUFBdUI7QUFBQ0MsSUFB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cEIsRUFBdUI7QUFBQ0osTUFBQUEsT0FBTyxFQUFDO0FBQVQsS0FBdkIsRUFBb0M5QixJQUFwQyxDQUF5QyxZQUFVO0FBQUNmLE1BQUFBLENBQUMsQ0FBQ3NDLElBQUYsQ0FBT2MsT0FBUCxJQUFpQjFCLENBQUMsV0FBRCxDQUFVZSxFQUFWLElBQWNaLENBQUMsQ0FBQ2EsTUFBRixDQUFTQyxFQUF2QixJQUEyQmIsQ0FBQyxDQUFDdUIsV0FBRixDQUFjQyxZQUFkLEVBQTVDO0FBQXlFLEtBQTdILEVBQStIUixLQUEvSDtBQUF1SSxHQUE3TixFQUErTkEsS0FBL04sSUFBdU9mLEVBQUUsQ0FBQ3dCLFNBQUgsQ0FBYUMsVUFBYixDQUF3QixZQUF4QixFQUFxQ3pCLEVBQUUsQ0FBQzBCLE1BQXhDLENBQXZPO0FBQXVSLENBQWhlLEVBQWlldkMsQ0FBQyxDQUFDLENBQUNoQixDQUFDLENBQUM2QixFQUFFLENBQUMyQixXQUFKLENBQUYsQ0FBRCxFQUFxQnRCLENBQUMsQ0FBQ3ZCLFNBQXZCLEVBQWlDLEtBQWpDLEVBQXVDLEtBQUssQ0FBNUMsQ0FBbGUsRUFBaWhCSyxDQUFDLENBQUMsQ0FBQ2xCLENBQUQsQ0FBRCxFQUFLb0MsQ0FBTCxDQUFwaEIsQ0FBbkc7O0FBQWdvQixTQUFTQSxDQUFULEdBQVk7QUFBQyxNQUFJcEMsQ0FBQyxHQUFDLFNBQU9zQixDQUFQLElBQVVBLENBQUMsQ0FBQ3FDLEtBQUYsQ0FBUSxJQUFSLEVBQWF2QyxTQUFiLENBQVYsSUFBbUMsSUFBekM7QUFBOEMsU0FBT3BCLENBQUMsQ0FBQ2dELEdBQUYsR0FBTSxJQUFOLEVBQVdoRCxDQUFsQjtBQUFvQjs7QUFBQUksQ0FBQyxXQUFELEdBQVVKLENBQVYiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBlPXJlcXVpcmU7XG52YXIgdD1tb2R1bGU7XG52YXIgbz1leHBvcnRzO1xuXCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG8gaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG8oKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KG8ucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyBvKX0pLGE9dGhpcyYmdGhpcy5fX2RlY29yYXRlfHxmdW5jdGlvbihlLHQsbyxuKXt2YXIgaSxhPWFyZ3VtZW50cy5sZW5ndGgscj1hPDM/dDpudWxsPT09bj9uPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxvKTpuO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBSZWZsZWN0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBSZWZsZWN0LmRlY29yYXRlKXI9UmVmbGVjdC5kZWNvcmF0ZShlLHQsbyxuKTtlbHNlIGZvcih2YXIgcz1lLmxlbmd0aC0xOzA8PXM7cy0tKShpPWVbc10pJiYocj0oYTwzP2kocik6MzxhP2kodCxvLHIpOmkodCxvKSl8fHIpO3JldHVybiAzPGEmJnImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8scikscn07T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHIscz1lKFwiQXBwQ29tbW9uXCIpLGM9ZShcIkJhc2VTZGtcIiksbD1lKFwiUGxhdGZvcm1GdW5cIiksdD1jYy5fZGVjb3JhdG9yLGU9dC5jY2NsYXNzLHQ9dC5wcm9wZXJ0eSxlPShyPWNjLkNvbXBvbmVudCxpKHAscikscC5wcm90b3R5cGUub25Mb2FkPWZ1bmN0aW9uKCl7dGhpcy5ub2RlLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmFjdGl2ZT1zLmRlZmF1bHQuUEYhPWMuR0FNRVBGLldYJiYhYy5HQU1FUEYuaXNBRFIoKSx0aGlzLm5vZGUub3BhY2l0eT0yNTV9LHAucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztjYy50d2Vlbih0aGlzLmJhcikudG8ocy5kZWZhdWx0LlBGPT1jLkdBTUVQRi5XRUI/LjI6MS4zLHtwcm9ncmVzczoxfSkuY2FsbChmdW5jdGlvbigpe2NjLnR3ZWVuKGUubm9kZSkudG8oLjMse29wYWNpdHk6MH0pLmNhbGwoZnVuY3Rpb24oKXtlLm5vZGUuZGVzdHJveSgpLHMuZGVmYXVsdC5QRj09Yy5HQU1FUEYuV1gmJmwuUGxhdGZvcm1GdW4uc2hvd0Jhbm5lckFkKCl9KS5zdGFydCgpfSkuc3RhcnQoKSxjYy5yZXNvdXJjZXMucHJlbG9hZERpcihcInByZWZhYi9wb3BcIixjYy5QcmVmYWIpfSxhKFt0KGNjLlByb2dyZXNzQmFyKV0scC5wcm90b3R5cGUsXCJiYXJcIix2b2lkIDApLGEoW2VdLHApKTtmdW5jdGlvbiBwKCl7dmFyIGU9bnVsbCE9PXImJnIuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzO3JldHVybiBlLmJhcj1udWxsLGV9by5kZWZhdWx0PWUiXX0=