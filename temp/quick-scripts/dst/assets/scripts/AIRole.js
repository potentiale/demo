
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/AIRole.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a904bjWZw1M5bUpQinJNbW4', 'AIRole');
// scripts/AIRole.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    c = e("ListenID"),
    l = e("Cfg"),
    p = e("GameScene"),
    d = e("AIState"),
    u = e("FSMBase"),
    t = cc._decorator,
    e = t.ccclass,
    e = (t.property, r = u["default"], i(f, r), f.prototype.initState = function (e) {
  var t = this;
  cc.log("AIRole初始化所有状态"), this._AiParameter = new d.AiParameter(), this._AiParameter.moveSpeed = l.Cfg.Costant.get(1).MoveSpeedMan, this.ower = e, this.statesList[d.StateType.Idle] = new d.IdleState(this), this.statesList[d.StateType.Move] = new d.MoveState(this), this.statesList[d.StateType.Hurt] = new d.HurtState(this), this.statesList[d.StateType.Die] = new d.DieState(this), this._isActive = !0, this.setAIState(d.StateType.Idle), s["default"].MapClr.myMap.node.on(c.ListenID.GameState, function () {
    s["default"].GScene._GameState == p.GAME_STATE.CountDown && t.schedule(t.newThink, 1 + s["default"].GetRandomNum(0, 5) / 10);
  }, this), s["default"].MapClr.myMap.node.on(c.ListenID.Role_TOBed, this.newThink, this);
}, f.prototype.setIdle = function () {
  this.setAIState(d.StateType.Idle);
}, f.prototype.onDisable = function () {
  this.unscheduleAllCallbacks();
}, f.prototype.newThink = function () {
  this._isActive && (this.target && this.target.isValid ? this.checkBed() || (s["default"].getDistance(this.node.position, this.target.node.position) < 150 ? (this._isActive = !1, this.target.mountRole(this.ower), this.exitAI()) : this.searchPath()) : this.searchPoint());
}, f.prototype.setTargetByForce = function (e) {
  console.log("set bed", e.roomID), this.target = e, this.searchPath();
}, f.prototype.exitAI = function () {
  this._isActive = !1, this.enabled = !1, this.destroy();
}, f.prototype.searchPoint = function () {
  var e,
      t,
      o = [];

  for (t in s["default"].MapClr.bedList) {
    var n = s["default"].MapClr.bedList[t];
    n.isHaveMan || o.push(n);
  }

  e = s["default"].GetArrTarge(o), this.target = e, this.searchPath();
}, f.prototype.searchPath = function () {
  var e = s["default"].MapClr.getMapPos(this.target.node.position);
  this.move(e);
}, f.prototype.checkBed = function () {
  return !(!this.target || !this.target.isHaveMan && 0 != this.target.node.active || (this.renounceTarget(), 0));
}, f.prototype.renounceTarget = function () {
  this.target = null, this.setAIState(d.StateType.Idle);
}, f.prototype.update = function (e) {
  s["default"].GScene.isPause || this._isActive && this.ower._isActive && this.currentStateClr.OnUpdate(e);
}, a([e], f));

function f() {
  var e = null !== r && r.apply(this, arguments) || this;
  return e.statesList = [], e._time = 0, e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,