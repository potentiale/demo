
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/TConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1e4caD9BdRP2JqDvhnkEnIX', 'TConfig');
// scripts/TConfig.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

Object.defineProperty(o, "__esModule", {
  value: !0
}), o.TConfig = void 0;
n.prototype.initByMap = function (e) {
  this._map, this._map = e;
}, Object.defineProperty(n.prototype, "keys", {
  get: function get() {
    var e,
        t = [];

    for (e in this._map) {
      t.push(e);
    }

    return t;
  },
  enumerable: !1,
  configurable: !0
}), Object.defineProperty(n.prototype, "allArray", {
  get: function get() {
    var e,
        t = [];

    for (e in this._map) {
      t.push(this._map[e]);
    }

    return t;
  },
  enumerable: !1,
  configurable: !0
}), n.prototype.initByArray = function (e) {
  var t = this;
  null == this._map ? (this._map = {}, e.forEach(function (e) {
    t._map[e.id] = e;
  })) : console.error(this._name + " TConfig.initByArray repetition");
}, n.prototype.tryGet = function (e) {
  if (null != this._map) {
    e = this._map[e];
    return [null != e, e];
  }

  console.error(this._name + " TConfig.isExist _map null");
}, n.prototype.get = function (e) {
  if (null != this._map) {
    var t = this._map[e];
    return null == t && console.warn(this._name + " TConfig.get fail, id:", e), t;
  }

  console.error(this._name + " TConfig.get _map null");
}, n.prototype.find = function (e) {
  if (null != this._map) {
    for (var t in this._map) {
      var o,
          n = this._map[t],
          i = !0;

      for (o in e) {
        if (e[o] !== n[o]) {
          i = !1;
          break;
        }
      }

      if (i) return n;
    }

    return console.error(this._name + " TConfig.find fail, key:", JSON.stringify(e)), null;
  }

  console.error(this._name + " TConfig.find _map null");
}, n.prototype.filter = function (e) {
  if (null != this._map) {
    var t,
        o = [];

    for (t in this._map) {
      var n,
          i = this._map[t],
          a = !0;

      for (n in e) {
        if (e[n] !== i[n]) {
          a = !1;
          break;
        }
      }

      a && o.push(i);
    }

    return o.length <= 0 && cc.warn(this._name + " TConfig.filter fail, key:", JSON.stringify(e)), o;
  }

  console.error(this._name + " TConfig.filter _map null");
}, n.prototype.sort = function (e, r) {
  var s = this;
  e.sort(function (e, t) {
    for (var o in r) {
      var n = r[o],
          i = e[o],
          a = t[o];
      if (null != i && null != a) return n * (i - a);
      console.warn(s._name + " TConfig.sort property null, key:", o, "id", e.id, t.id);
    }

    return 0;
  });
}, n.prototype.forEach = function (e, t) {
  if (null != this._map) for (var o in this._map) {
    o = this._map[o];
    e.call(t, o);
  } else console.error(this._name + " TConfig.forEach _map null");
}, n.prototype.keyMap = function (e, t, o) {
  null == this._keyMap && (this._keyMap = {});
  var n = this._keyMap[e];
  null == n && (this._keyMap[e] = n = {});
  var i = n[t];
  if (null == i) for (var a in n[t] = i = {}, this._map) {
    var r = this._map[a],
        a = r[e],
        r = r[t];
    null != a && null != r && (i[a] = r);
  }
  return i[o];
}, n.prototype.getAll = function () {
  if (null != this._map) return this._map;
  console.error(this._name + " TConfig.getAll _map null");
}, t = n;

function n() {
  this._name = "", this._keyMap = null;
}

o.TConfig = t;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,