
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/AIBuild.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '04b02V4bnBKpKbuUNNEqGJ7', 'AIBuild');
// scripts/AIBuild.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
}), o.BuildAIOperation_Type = o.BuildAI_Type = void 0;
var r,
    s,
    c = e("AppCommon"),
    l = e("ListenID"),
    p = e("FSMBase"),
    d = e("Cfg"),
    u = e("ConstructVideoUnlock");
(t = r = o.BuildAI_Type || (o.BuildAI_Type = {}))[t.Not = 0] = "Not", t[t.Check = 1] = "Check", t[t.Idle = 2] = "Idle", t[t.Doit = 3] = "Doit", (e = s = o.BuildAIOperation_Type || (o.BuildAIOperation_Type = {}))[e.Not = 0] = "Not", e[e.Build = 1] = "Build", e[e.Up = 2] = "Up", e[e.Sell = 3] = "Sell";
var f,
    t = cc._decorator,
    e = t.ccclass,
    e = (t.property, f = p["default"], i(h, f), h.prototype.initState = function (e, t) {
  var o = this;
  this._AiParameter = t, this.ower = e, this.initPolicy(), t && (cc.log("初始化所有状态:", t.name, t.id), this.schedule(this.newThink, 1 + c["default"].GetRandomNum(0, 5) / 10), this.setAIState(r.Check), this._isActive = !0, c["default"].CONFIG_INFO.AITag && cc.resources.load("prefab/AITest/AITag", cc.Prefab, function (e, t) {
    t = cc.instantiate(t);
    t.setParent(o.node), t._components[0].initFun.AITag(o.ower);
  }), this.buildMax = JSON.parse(t.buildingMax), this.ower.myDoor.node.on(l.ListenID.Send_Hurt, this.getHurt, this));
}, h.prototype.onDisable = function () {
  this.unscheduleAllCallbacks();
}, h.prototype.initPolicy = function () {
  var e,
      t = this.ower.myBed.myTerritoryMap;

  for (e in t) {
    for (var o in t[e]) {
      var n = t[e][o];
      this.pointSeting[n.name ? "attack" : "other"].push({
        x: e,
        y: o,
        sort: +n.name || 0
      });
    }
  }

  this.pointSeting.attack = c["default"].arrCompare(this.pointSeting.attack, "sort", 0), this.getPolicy.resource[0] = this.ower.myBed.attribute.buildingID;
  var i = this.ower.skillManage.getType(2);
  this.ower.CDManage.InitItem(i, 180);
}, h.prototype.newThink = function () {
  var e, t, o, n;
  this._isActive && !c["default"].GScene.isPause && (this.ower.skillManage.useSkill(this.ower.skillManage.getType(4)), this.currentState == r.Check) && (e = c["default"].MapClr.monsterList[0].attribute.data, n = 0 < this.ower.myCapabilities.hp / e.atk - c["default"].MapClr.monsterList[0]._life / (this.ower.myCapabilities.atk || .1) ? 1 : 2, (o = this.getWeight(this.getPolicy.first, this._AiParameter["type" + n])) && this.checkPolicy(o.id) && (t = this.getPolicy[o.id], (e = this.getWeight(t, this._AiParameter[o.id + n])) && (t = void 0, "number" == typeof e.id ? t = c["default"].MapClr.arcIDList[e.id].id : 0 < e.id.length && (t = c["default"].MapClr.arcIDList[c["default"].GetArrTarge(e.id)].id), t && (n = d.Cfg.Building1.get(t), this.checkLimt(n) || !this.checkRoomIsSpace() ? (e = this.getNotMaxArc(n)) ? (t = d.Cfg.Building1.get(+e.attribute.data.id + 1)) && this.checkOperation({
    type: s.Up,
    arcTag: e,
    arcCfg: t
  }) : this.renounceTarget(o.id, n) : (o = this.checkSpace(o.id, n)) && this.checkOperation({
    type: s.Build,
    pos: o,
    arcCfg: n
  })))));
}, h.prototype.checkOperation = function (e) {
  var t = this.checkNeetTiem(e.arcCfg);
  e.time = t + 2, t < 0 ? this.newOperation(e) : t < this.toleranceTime ? this.setWaiting(e) : this.ower.skillManage.useSkill(this.ower.skillManage.getType(2));
}, h.prototype.checkPolicy = function (e) {
  for (var t in this.getPolicy[e]) {
    if ("number" == typeof this.getPolicy[e][t] && 0 != this.getPolicy[e][t]) return !0;
    if ("object" == typeof this.getPolicy[e][t]) for (var o in this.getPolicy[e][t]) {
      if (0 != this.getPolicy[e][t][o]) return !0;
    }
  }

  var n = this.getPolicy.first.indexOf(e);
  return this.getPolicy.first[n] = 0, !1;
}, h.prototype.checkRoomIsSpace = function () {
  var e,
      t = this.ower.myBed.myTerritoryMap;

  for (e in t) {
    for (var o in t[e]) {
      if (!t[e][o].arc) return !0;
    }
  }

  return !1;
}, h.prototype.checkSpace = function (e) {
  function t(e) {
    for (var t in o.pointSeting[e]) {
      t = o.pointSeting[e][t];
      if (!n[t.x][t.y].arc) return n[t.x][t.y];
    }

    return null;
  }

  var o = this,
      n = this.ower.myBed.myTerritoryMap;
  return t("attack" == (e = void 0 === e ? "other" : e) ? "attack" : "other") || t("attack" == e ? "other" : "attack");
}, h.prototype.renounceTarget = function (e, t) {
  if ("attack" == e && 2 != t.buildingType) {
    var o = this.getPolicy.attack[1].indexOf(t.buildID);
    return o < 0 ? cc.log("attack没有目标", t) : void this.getPolicy.attack[1].splice(o, 1);
  }

  o = this.getPolicy[e].indexOf(t.buildID);
  if (o < 0) return cc.log("没有目标", t);
  this.getPolicy[e][o] = 0;
}, h.prototype.checkLimt = function (e) {
  return 0 <= [1, 3].indexOf(e.buildingType) || this.ower.myBuildNum[e.buildingType] >= this.buildMax[e.buildingType] || e.maximum && this.ower.myBuildNum[e.buildingType] >= e.maximum;
}, h.prototype.checkMax = function (e) {
  return e.attribute.isMax;
}, h.prototype.getNotMaxArc = function (e) {
  var t,
      o = this.ower.myBed.myTerritoryMap,
      n = [],
      i = [];

  for (t in o) {
    for (var a in o[t]) {
      a = o[t][a];
      a.arc && a.arc._isActive && a.arc.attribute && a.arc.attribute.buildingType == e.buildingType && (this.checkMax(a.arc) || (i.push({
        index: n.length,
        lv: a.arc.attribute.lv
      }), n.push(a.arc)));
    }
  }

  return 0 == n.length ? null : n[(i = c["default"].arrCompare(i, "lv", 0))[0].index];
}, h.prototype.checkNeetTiem = function (e) {
  var t,
      o = this.ower.wallet,
      n = this.ower.myCapabilities,
      i = [];
  return e.costCoin && (t = (e.costCoin - o.coin) / (n.outputCoin || .1), i.push(t)), e.costPower && (n = (e.costPower - o.power) / (n.outputPower || .1), i.push(n)), 2 <= i.length ? Math.ceil(Math.max(i[0], i[1])) : Math.ceil(i[0]);
}, h.prototype.getHurt = function (e) {
  this.ower.myDoor._isActive && (this.ower.myDoor._lifeRatio < .8 && this.ower.skillManage.useSkill(1), this.ower.myDoor._lifeRatio < .1 && this.ower.skillManage.useSkill(this.ower.skillManage.getType(3)), 2 * -e.num >= this.ower.myDoor._life && 0 == this.videoUpLv[3] && !this.ower.myDoor.attribute.isMax && (this.videoUpLv[3]++, this.ower.myDoor.upAttribute()), this.ower.skillManage.useSkill(this.ower.skillManage.getType(6)));
}, h.prototype.setWaiting = function (e) {
  var t = this;
  this.waitingBuild = e.arcCfg, this.setAIState(r.Idle), this.scheduleOnce(function () {
    t.newOperation(e), t.waitingBuild = null;
  }, e.time);
}, h.prototype.newOperation = function (e) {
  var t = this;
  e.type == s.Build ? this.setConsume(e.arcCfg, function () {
    c["default"].MapClr.newBuild(e.arcCfg, e.pos, t.ower);
  }) : e.type == s.Up && this.setConsume(e.arcCfg, function () {
    e.arcTag.upAttribute();
  }), this.setAIState(r.Check);
}, h.prototype.unlockSConstruct = function (e, t) {
  for (var o in this.ower.myBed.SConstruct) {
    o = this.ower.myBed.SConstruct[o];
    if (o.attribute.buildingType == e.buildingType) return o.getComponent(u["default"]).unlock(), t && t(), void c["default"].MainView.gameMsg(c["default"].strReplace(" %1d完成%2d的建造", this.ower.matchData.name, e.name));
  }
}, h.prototype.setConsume = function (e, t) {
  var o = this.ower.wallet;
  return e.costCoin && e.costCoin > o.coin ? cc.log("AI金币不足", e.costCoin, o.coin) : e.costPower && e.costPower > o.power ? cc.log("AI水滴不足", e.costPower, o.power) : (e.costCoin && this.ower.setCoin(-e.costCoin), e.costPower && this.ower.setPower(-e.costPower), void t());
}, h.prototype.getWeight = function (e, t) {
  var o,
      n = [],
      i = !0;

  for (o in t) {
    n.push({
      id: e[o],
      w: e[o] ? t[o] : 0
    }), 0 != e[o] && (i = !1);
  }

  return i ? null : c["default"].weightGetValue(n);
}, h.prototype.setAIState = function (e) {
  this.currentState = e;
}, h.prototype.exitAI = function () {
  this._isActive = !1, this.enabled = !1, this.destroy();
}, a([e], h));

function h() {
  var e = null !== f && f.apply(this, arguments) || this;
  return e._isActive = !1, e.statesList = [], e.toleranceTime = 30, e.pointSeting = {
    attack: [],
    other: []
  }, e.getPolicy = {
    first: ["resource", "defend", "attack"],
    resource: [1, 5, 6, 13],
    defend: [4, 10, 12],
    attack: [3, [11, 14, 15, 16, 17, 18, 19, 20]]
  }, e.videoUpLv = {
    3: 0
  }, e._time = 0, e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,