
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/NotifyListener.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '74890IWv8BBvYfl0MsUU8R0', 'NotifyListener');
// scripts/NotifyListener.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var a = void 0 && (void 0).__spreadArrays || function () {
  for (var e = 0, t = 0, o = arguments.length; t < o; t++) {
    e += arguments[t].length;
  }

  for (var n = Array(e), i = 0, t = 0; t < o; t++) {
    for (var a = arguments[t], r = 0, s = a.length; r < s; r++, i++) {
      n[i] = a[r];
    }
  }

  return n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
}), o.NotifyListener = void 0;
var r = e("ListenID"),
    s = e("NotifyID"),
    c = (Object.defineProperty(p.prototype, "context", {
  get: function get() {
    return this._context;
  },
  enumerable: !1,
  configurable: !0
}), Object.defineProperty(p.prototype, "callback", {
  get: function get() {
    return this._callback;
  },
  enumerable: !1,
  configurable: !0
}), Object.defineProperty(p.prototype, "prior", {
  get: function get() {
    return this._prior;
  },
  enumerable: !1,
  configurable: !0
}), p),
    l = (i.prototype.toString = function () {
  return "<ListenerManager id:%{m_id}, times:%{m_sendTimes}>";
}, i.prototype.IsExistHandler = function (e, t) {
  var o = this._handlers.length;
  if (0 < o) for (var n = o - 1; 0 <= n; n--) {
    var i = this._handlers[n];
    if (i.callback === e && i.context == t) return !0;
  }
  return !1;
}, i.prototype.RegisterHandler = function (e, t, o) {
  var n = new c(e, t, o),
      o = this._handlers.length;

  if (0 < o) {
    for (var i = !1, a = o - 1; 0 <= a; a--) {
      if (n.prior >= this._handlers[a].prior) {
        this._handlers.splice(a + 1, 0, n), i = !0;
        break;
      }
    }

    i || this._handlers.unshift(n);
  } else this._handlers.push(n);

  return !0;
}, i.prototype.RemoveHandler = function (e, t) {
  var o = -1,
      n = this._handlers.length;
  if (0 < n) for (var i = n - 1; 0 <= i; i--) {
    var a = this._handlers[i];

    if (a.callback === e && a.context == t) {
      o = i;
      break;
    }
  }
  return -1 != o && (this._handlers.splice(o, 1), !0);
}, i.prototype.Send = function () {
  for (var e, t = [], o = 0; o < arguments.length; o++) {
    t[o] = arguments[o];
  }

  for (var n = this._handlers.length - 1; 0 <= n; n--) {
    var i = this._handlers[n];
    (e = i.callback).call.apply(e, a([i.context], t));
  }
}, i),
    e = (n.prototype.GetCellStackString = function () {
  for (var e = "[", t = 0, o = this._callStacks; t < o.length; t++) {
    e += o[t] + ",";
  }

  return e + "]";
}, n.prototype.CheckAndPushCallStack = function (e) {
  var t = this._callStacks.length;
  return 15 <= t ? (cc.error("[NotifyListener].Send out call stack:" + this.GetCellStackString() + " msg:" + e), !1) : 10 <= t ? (cc.warn("[NotifyListener].Send warning call stack:" + this.GetCellStackString() + " msg:" + e), !1) : (this._callStacks.push(e), !0);
}, n.prototype.PopCallStack = function () {
  this._callStacks.pop();
}, n.prototype.Register = function (e, t, o, n) {
  if (null != t) {
    var i = this._managers[e];
    if (null == i) i = new l(e), this._managers[e] = i;else if (i.IsExistHandler(t, o)) return void cc.error("[NotifyListener].Register:" + (r.ListenID[e] || s.NotifyID[e]) + " callback repeat, skip " + o);
    i.RegisterHandler(t, o, n);
  } else cc.error("[NotifyListener].Register:" + e + " callback null");
}, n.prototype.Unregister = function (e, t, o) {
  var n = this._managers[e];
  null != n ? n.RemoveHandler(t, o) || cc.warn("[NotifyListener].Unregister:" + e + " can't find callback:" + t) : cc.warn("[NotifyListener].Unregister can't find ListenerManager:" + e + " callback:" + t);
}, n.prototype.Send = function (e) {
  for (var t = [], o = 1; o < arguments.length; o++) {
    t[o - 1] = arguments[o];
  }

  var n = this._managers[e];
  null != n ? this.CheckAndPushCallStack(e) && (n.Send.apply(n, t), this.PopCallStack()) : cc.warn("[NotifyListener].Send can't find ListenerManager:" + e);
}, n.prototype.IsExist = function (e) {
  return null != this._managers[e];
}, n);

function n() {
  this._managers = {}, this._callStacks = [];
}

function i(e) {
  this._sendTimes = 0, this._listenId = 0, this._listenId = e, this._handlers = new Array();
}

function p(e, t, o) {
  this._prior = 0, this._sendTimes = 0, this._callback = e, this._context = t, this._prior = o;
}

o.NotifyListener = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcTm90aWZ5TGlzdGVuZXIuanMiXSwibmFtZXMiOlsiZSIsInJlcXVpcmUiLCJ0IiwibW9kdWxlIiwibyIsImV4cG9ydHMiLCJhIiwiX19zcHJlYWRBcnJheXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuIiwiQXJyYXkiLCJpIiwiciIsInMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiTm90aWZ5TGlzdGVuZXIiLCJjIiwicCIsInByb3RvdHlwZSIsImdldCIsIl9jb250ZXh0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9jYWxsYmFjayIsIl9wcmlvciIsImwiLCJ0b1N0cmluZyIsIklzRXhpc3RIYW5kbGVyIiwiX2hhbmRsZXJzIiwiY2FsbGJhY2siLCJjb250ZXh0IiwiUmVnaXN0ZXJIYW5kbGVyIiwicHJpb3IiLCJzcGxpY2UiLCJ1bnNoaWZ0IiwicHVzaCIsIlJlbW92ZUhhbmRsZXIiLCJTZW5kIiwiY2FsbCIsImFwcGx5IiwiR2V0Q2VsbFN0YWNrU3RyaW5nIiwiX2NhbGxTdGFja3MiLCJDaGVja0FuZFB1c2hDYWxsU3RhY2siLCJjYyIsImVycm9yIiwid2FybiIsIlBvcENhbGxTdGFjayIsInBvcCIsIlJlZ2lzdGVyIiwiX21hbmFnZXJzIiwiTGlzdGVuSUQiLCJOb3RpZnlJRCIsIlVucmVnaXN0ZXIiLCJJc0V4aXN0IiwiX3NlbmRUaW1lcyIsIl9saXN0ZW5JZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFDLEdBQUNDLE9BQU47QUFDQSxJQUFJQyxDQUFDLEdBQUNDLE1BQU47QUFDQSxJQUFJQyxDQUFDLEdBQUNDLE9BQU47QUFDQTs7QUFBYSxJQUFJQyxDQUFDLEdBQUMsVUFBTSxTQUFLQyxjQUFYLElBQTJCLFlBQVU7QUFBQyxPQUFJLElBQUlQLENBQUMsR0FBQyxDQUFOLEVBQVFFLENBQUMsR0FBQyxDQUFWLEVBQVlFLENBQUMsR0FBQ0ksU0FB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bUMsS0FBS0EsU0FBTCxHQUFlMUQsQ0FBbEQsRUFBb0QsS0FBSytCLFNBQUwsR0FBZSxJQUFJcEIsS0FBSixFQUFuRTtBQUE2RTs7QUFBQSxTQUFTUyxDQUFULENBQVdwQixDQUFYLEVBQWFFLENBQWIsRUFBZUUsQ0FBZixFQUFpQjtBQUFDLE9BQUt1QixNQUFMLEdBQVksQ0FBWixFQUFjLEtBQUs4QixVQUFMLEdBQWdCLENBQTlCLEVBQWdDLEtBQUsvQixTQUFMLEdBQWUxQixDQUEvQyxFQUFpRCxLQUFLdUIsUUFBTCxHQUFjckIsQ0FBL0QsRUFBaUUsS0FBS3lCLE1BQUwsR0FBWXZCLENBQTdFO0FBQStFOztBQUFBQSxDQUFDLENBQUNjLGNBQUYsR0FBaUJsQixDQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGU9cmVxdWlyZTtcbnZhciB0PW1vZHVsZTtcbnZhciBvPWV4cG9ydHM7XG5cInVzZSBzdHJpY3RcIjt2YXIgYT10aGlzJiZ0aGlzLl9fc3ByZWFkQXJyYXlzfHxmdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9MCxvPWFyZ3VtZW50cy5sZW5ndGg7dDxvO3QrKyllKz1hcmd1bWVudHNbdF0ubGVuZ3RoO2Zvcih2YXIgbj1BcnJheShlKSxpPTAsdD0wO3Q8bzt0KyspZm9yKHZhciBhPWFyZ3VtZW50c1t0XSxyPTAscz1hLmxlbmd0aDtyPHM7cisrLGkrKyluW2ldPWFbcl07cmV0dXJuIG59O09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uTm90aWZ5TGlzdGVuZXI9dm9pZCAwO3ZhciByPWUoXCJMaXN0ZW5JRFwiKSxzPWUoXCJOb3RpZnlJRFwiKSxjPShPYmplY3QuZGVmaW5lUHJvcGVydHkocC5wcm90b3R5cGUsXCJjb250ZXh0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb250ZXh0fSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLnByb3RvdHlwZSxcImNhbGxiYWNrXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jYWxsYmFja30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkocC5wcm90b3R5cGUsXCJwcmlvclwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJpb3J9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSkscCksbD0oaS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIjxMaXN0ZW5lck1hbmFnZXIgaWQ6JXttX2lkfSwgdGltZXM6JXttX3NlbmRUaW1lc30+XCJ9LGkucHJvdG90eXBlLklzRXhpc3RIYW5kbGVyPWZ1bmN0aW9uKGUsdCl7dmFyIG89dGhpcy5faGFuZGxlcnMubGVuZ3RoO2lmKDA8bylmb3IodmFyIG49by0xOzA8PW47bi0tKXt2YXIgaT10aGlzLl9oYW5kbGVyc1tuXTtpZihpLmNhbGxiYWNrPT09ZSYmaS5jb250ZXh0PT10KXJldHVybiEwfXJldHVybiExfSxpLnByb3RvdHlwZS5SZWdpc3RlckhhbmRsZXI9ZnVuY3Rpb24oZSx0LG8pe3ZhciBuPW5ldyBjKGUsdCxvKSxvPXRoaXMuX2hhbmRsZXJzLmxlbmd0aDtpZigwPG8pe2Zvcih2YXIgaT0hMSxhPW8tMTswPD1hO2EtLSlpZihuLnByaW9yPj10aGlzLl9oYW5kbGVyc1thXS5wcmlvcil7dGhpcy5faGFuZGxlcnMuc3BsaWNlKGErMSwwLG4pLGk9ITA7YnJlYWt9aXx8dGhpcy5faGFuZGxlcnMudW5zaGlmdChuKX1lbHNlIHRoaXMuX2hhbmRsZXJzLnB1c2gobik7cmV0dXJuITB9LGkucHJvdG90eXBlLlJlbW92ZUhhbmRsZXI9ZnVuY3Rpb24oZSx0KXt2YXIgbz0tMSxuPXRoaXMuX2hhbmRsZXJzLmxlbmd0aDtpZigwPG4pZm9yKHZhciBpPW4tMTswPD1pO2ktLSl7dmFyIGE9dGhpcy5faGFuZGxlcnNbaV07aWYoYS5jYWxsYmFjaz09PWUmJmEuY29udGV4dD09dCl7bz1pO2JyZWFrfX1yZXR1cm4tMSE9byYmKHRoaXMuX2hhbmRsZXJzLnNwbGljZShvLDEpLCEwKX0saS5wcm90b3R5cGUuU2VuZD1mdW5jdGlvbigpe2Zvcih2YXIgZSx0PVtdLG89MDtvPGFyZ3VtZW50cy5sZW5ndGg7bysrKXRbb109YXJndW1lbnRzW29dO2Zvcih2YXIgbj10aGlzLl9oYW5kbGVycy5sZW5ndGgtMTswPD1uO24tLSl7dmFyIGk9dGhpcy5faGFuZGxlcnNbbl07KGU9aS5jYWxsYmFjaykuY2FsbC5hcHBseShlLGEoW2kuY29udGV4dF0sdCkpfX0saSksZT0obi5wcm90b3R5cGUuR2V0Q2VsbFN0YWNrU3RyaW5nPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVwiW1wiLHQ9MCxvPXRoaXMuX2NhbGxTdGFja3M7dDxvLmxlbmd0aDt0KyspZSs9b1t0XStcIixcIjtyZXR1cm4gZStcIl1cIn0sbi5wcm90b3R5cGUuQ2hlY2tBbmRQdXNoQ2FsbFN0YWNrPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2NhbGxTdGFja3MubGVuZ3RoO3JldHVybiAxNTw9dD8oY2MuZXJyb3IoXCJbTm90aWZ5TGlzdGVuZXJdLlNlbmQgb3V0IGNhbGwgc3RhY2s6XCIrdGhpcy5HZXRDZWxsU3RhY2tTdHJpbmcoKStcIiBtc2c6XCIrZSksITEpOjEwPD10PyhjYy53YXJuKFwiW05vdGlmeUxpc3RlbmVyXS5TZW5kIHdhcm5pbmcgY2FsbCBzdGFjazpcIit0aGlzLkdldENlbGxTdGFja1N0cmluZygpK1wiIG1zZzpcIitlKSwhMSk6KHRoaXMuX2NhbGxTdGFja3MucHVzaChlKSwhMCl9LG4ucHJvdG90eXBlLlBvcENhbGxTdGFjaz1mdW5jdGlvbigpe3RoaXMuX2NhbGxTdGFja3MucG9wKCl9LG4ucHJvdG90eXBlLlJlZ2lzdGVyPWZ1bmN0aW9uKGUsdCxvLG4pe2lmKG51bGwhPXQpe3ZhciBpPXRoaXMuX21hbmFnZXJzW2VdO2lmKG51bGw9PWkpaT1uZXcgbChlKSx0aGlzLl9tYW5hZ2Vyc1tlXT1pO2Vsc2UgaWYoaS5Jc0V4aXN0SGFuZGxlcih0LG8pKXJldHVybiB2b2lkIGNjLmVycm9yKFwiW05vdGlmeUxpc3RlbmVyXS5SZWdpc3RlcjpcIisoci5MaXN0ZW5JRFtlXXx8cy5Ob3RpZnlJRFtlXSkrXCIgY2FsbGJhY2sgcmVwZWF0LCBza2lwIFwiK28pO2kuUmVnaXN0ZXJIYW5kbGVyKHQsbyxuKX1lbHNlIGNjLmVycm9yKFwiW05vdGlmeUxpc3RlbmVyXS5SZWdpc3RlcjpcIitlK1wiIGNhbGxiYWNrIG51bGxcIil9LG4ucHJvdG90eXBlLlVucmVnaXN0ZXI9ZnVuY3Rpb24oZSx0LG8pe3ZhciBuPXRoaXMuX21hbmFnZXJzW2VdO251bGwhPW4/bi5SZW1vdmVIYW5kbGVyKHQsbyl8fGNjLndhcm4oXCJbTm90aWZ5TGlzdGVuZXJdLlVucmVnaXN0ZXI6XCIrZStcIiBjYW4ndCBmaW5kIGNhbGxiYWNrOlwiK3QpOmNjLndhcm4oXCJbTm90aWZ5TGlzdGVuZXJdLlVucmVnaXN0ZXIgY2FuJ3QgZmluZCBMaXN0ZW5lck1hbmFnZXI6XCIrZStcIiBjYWxsYmFjazpcIit0KX0sbi5wcm90b3R5cGUuU2VuZD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10sbz0xO288YXJndW1lbnRzLmxlbmd0aDtvKyspdFtvLTFdPWFyZ3VtZW50c1tvXTt2YXIgbj10aGlzLl9tYW5hZ2Vyc1tlXTtudWxsIT1uP3RoaXMuQ2hlY2tBbmRQdXNoQ2FsbFN0YWNrKGUpJiYobi5TZW5kLmFwcGx5KG4sdCksdGhpcy5Qb3BDYWxsU3RhY2soKSk6Y2Mud2FybihcIltOb3RpZnlMaXN0ZW5lcl0uU2VuZCBjYW4ndCBmaW5kIExpc3RlbmVyTWFuYWdlcjpcIitlKX0sbi5wcm90b3R5cGUuSXNFeGlzdD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9dGhpcy5fbWFuYWdlcnNbZV19LG4pO2Z1bmN0aW9uIG4oKXt0aGlzLl9tYW5hZ2Vycz17fSx0aGlzLl9jYWxsU3RhY2tzPVtdfWZ1bmN0aW9uIGkoZSl7dGhpcy5fc2VuZFRpbWVzPTAsdGhpcy5fbGlzdGVuSWQ9MCx0aGlzLl9saXN0ZW5JZD1lLHRoaXMuX2hhbmRsZXJzPW5ldyBBcnJheX1mdW5jdGlvbiBwKGUsdCxvKXt0aGlzLl9wcmlvcj0wLHRoaXMuX3NlbmRUaW1lcz0wLHRoaXMuX2NhbGxiYWNrPWUsdGhpcy5fY29udGV4dD10LHRoaXMuX3ByaW9yPW99by5Ob3RpZnlMaXN0ZW5lcj1lIl19