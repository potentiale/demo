
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/BossTable.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1343cuMym5Bh4uvX2D7uiwl', 'BossTable');
// scripts/BossTable.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    l = e("AppCommon"),
    p = e("PlatformFun"),
    s = e("ModelManage"),
    c = e("EggBase"),
    t = cc._decorator,
    e = t.ccclass,
    e = (t.property, r = c["default"], i(d, r), d.prototype.start = function () {
  this._searchDissqrt = Math.pow(this.node.width / 2, 2), l["default"].GScene._GameModel !== s.GAME_MODEL.BOSS_MODEL && this.schedule(this.searchPlayer, .2);
}, d.prototype.onTouch = function () {}, d.prototype.searchPlayer = function () {
  if (l["default"].GScene.player && l["default"].MapClr.myMap && l["default"].getDistanceSqrt(this.node.position, l["default"].GScene.player.node.position) <= this._searchDissqrt) {
    var e = l["default"].CONFIG_INFO.m1_BonusCoin,
        t = this.attribute.data.parameter[0],
        o = 0;

    if (e) {
      for (var n = e, i = [], a = 0, r = n.length / 2; a < r; a++) {
        var s = n[2 * a],
            c = n[2 * a + 1];
        i[a] = {
          w: c,
          v: s
        }, o = Math.max(o, s);
      }

      (t = l["default"].weightGetValue(i).v) == o && (l["default"].data.isRealAtkMe = !0);
    }

    p.PlatformFun.SendEvent("m1_bonuscoin"), l["default"].GScene.player.setCoin(t), l["default"].MapClr.newLabelTips("+" + t, this.node.position, cc.Color.YELLOW, "Fish coin"), this.unscheduleAllCallbacks();
    t = l["default"].MapClr.myegg.indexOf(this);
    0 <= t && l["default"].MapClr.myegg.splice(t, 1), this.node.destroy();
  }
}, a([e], d));

function d() {
  var e = null !== r && r.apply(this, arguments) || this;
  return e._searchDissqrt = 0, e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,