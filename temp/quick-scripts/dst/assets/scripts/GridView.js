
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/GridView.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b257bMbrAVP1aywOC3XzC98', 'GridView');
// scripts/GridView.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
}), o.GRID_TYPE = void 0;
var r,
    s = e("PoolArray"),
    c = e("GridViewCell"),
    l = e("TwoDLayoutObject"),
    p = e("TwoDHorizontalLayoutObject"),
    d = e("MathSection"),
    u = e("MathUtils"),
    f = e("AutoScaleComponent"),
    h = e("GridViewFreshWork"),
    m = cc._decorator,
    y = m.ccclass,
    t = m.property,
    e = m.menu;
(m = r = o.GRID_TYPE || (o.GRID_TYPE = {}))[m.GRID_HORIZONTAL = 0] = "GRID_HORIZONTAL", m[m.GRID_VERTICAL = 1] = "GRID_VERTICAL";
var g,
    e = (g = cc.Component, i(_, g), _.prototype.addNodeCreateEvent = function (e) {
  this.pool_array.firstLoad.push(e);
}, _.prototype.scrollToCell = function (e) {
  var t = this.layout_obj.getPosByIndex(e),
      o = this.layout_obj.item_size,
      n = null;

  switch (this.grid_view_type) {
    case r.GRID_HORIZONTAL:
      (n = cc.v2(t.x / this.layout_obj.key_count + .5 * o.x, 0)).x <= o.x && (n.x = 0), this.scrollview.scrollToPercentHorizontal(n.x / this.scrollview.getMaxScrollOffset().x, .15);
      break;

    case r.GRID_VERTICAL:
      n = cc.v2(0, -t.y - .5 * o.y), this.scrollview.scrollToOffset(n, .1);
      break;

    default:
      n = cc.v2(0, 0), this.scrollview.scrollToOffset(n);
  }

  this.doFresh();
}, _.prototype.moveToTop = function () {
  null !== this.scrollview && this.scrollview.scrollToOffset(cc.Vec2.ZERO, .1);
}, _.prototype.loadData = function (e) {
  this.init(), e.length >= this.data_list.length || this.moveToTop(), this.data_list = e, this.layout_obj.count = this.data_list.length;
  var t = cc.Vec2.ZERO;

  switch (this.grid_view_type) {
    case r.GRID_VERTICAL:
      var o = this.layout_obj.getBoundingRect().y;
      this.content.height = o, this.content.width = this.node.width, t.x = this.node.width, t.y = o;
      break;

    case r.GRID_HORIZONTAL:
      o = this.layout_obj.getBoundingRect().x;
      this.content.width = o, this.content.height = this.node.height, t.x = o, t.y = this.node.height;
  }

  this.layout_obj.parent_size = t, this.onLoadData(), this.doFresh();
}, _.prototype.onLoadData = function () {}, _.prototype.onEnable = function () {
  null !== this.scrollview && (this._scrollEnabled || this.scrollview._unregisterEvent());
}, _.prototype.onDestroy = function () {
  this.pool_array.clear(), this.dataCallBack = null, this._freshWorks.clear();
}, _.prototype.init = function () {
  var n = this;

  if (!this.has_init) {
    this.has_init = !0, this.node.on("scrolling", this.onScrolling, this), this.node.getComponent(cc.Widget) && this.node.getComponent(cc.Widget).updateAlignment();
    var e = cc.instantiate(this.templete),
        t = e.getComponent(cc.Widget);
    t && !0 === t.enabled && (e.parent = this.node, t.updateAlignment());
    var o = e.width * e.scale,
        t = e.height * e.scale;
    e.destroy();
    var i = 0,
        o = new cc.Vec2(o, t);

    switch (this.grid_view_type) {
      case r.GRID_HORIZONTAL:
        null !== this.scrollview && (this.scrollview.horizontal = !0, this.scrollview.vertical = !1), this.layout_obj = new p.TwoDHorizontalLayoutObject(), this.layout_obj.vertical_layout_type = this.vertical_layout, this.viewport_length = this.node.width;
        break;

      case r.GRID_VERTICAL:
        null !== this.scrollview && (this.scrollview.horizontal = !1, this.scrollview.vertical = !0), this.layout_obj = new l.TwoDLayoutObject(), this.layout_obj.horizontal_layout_type = this.horizontal_layout, this.viewport_length = this.node.height;
    }

    switch (this.enableAutoScale && null === this._autoScaleComponent && (this._autoScaleComponent = new f.AutoScaleComponent(), this._autoScaleComponent.itemSize = o, this._autoScaleComponent.parentSize = new cc.Vec2(this.node.width, this.node.height), this._autoScaleComponent.type = this.grid_view_type, this._autoScaleComponent.space = this.space, this._autoScaleComponent.keyCount = this.key_count, t = this._autoScaleComponent.getScale(), this._scaleRatio = t), this.layout_obj.key_count = this.key_count, this.layout_obj.space = this.space, this.layout_obj.item_anchor_point = this.templete.data.getAnchorPoint(), this.layout_obj.item_size = o, this.grid_view_type) {
      case r.GRID_HORIZONTAL:
        i = this.layout_obj.item_size.x + this.space.x;
        break;

      case r.GRID_VERTICAL:
        i = this.layout_obj.item_size.y + this.space.y;
    }

    o = (Math.ceil(this.viewport_length / i) + 1) * this.key_count;
    this.pool_array.parent = this.content, this.pool_array.template = this.templete, this.pool_array.max_count = o, this.pool_array.firstLoad.push(function (e, t, o) {
      e.name = n.templete.name + "_" + o, e.scale *= n._scaleRatio, e.getComponent(c["default"]).onInit();
    });
  }
}, _.prototype.doFresh = function () {
  var e = this.getCurVisibleIndex(),
      t = e.and(this.last_visible_range),
      o = t.Invert(this.last_visible_range);
  if (!o.isNullRange()) for (var n = Math.floor(o.left), i = Math.floor(o.right), a = n; a <= i; a++) {
    this.pool_array.getObj(a, !1).active = !1, this._freshWorks.removeWork(a);
  }
  this.freshArea(e, this.compareSection(e, t)), this.freshFinish(e);
}, _.prototype.freshItemInFrames = function (o) {
  var n = this;

  this._freshWorks.addWork(o, function () {
    var e = n.pool_array.getObj(o, !1);
    e.active = !0, e._onSiblingIndexChanged();
    var t = e.getComponent(cc.Widget);
    t && (e.removeComponent(t), e.width = n.layout_obj.item_size.x, e.height = n.layout_obj.item_size.y), n.calculatePos(e, o);
    t = n.data_list[o];
    null !== n.dataCallBack && n.dataCallBack(e, t, o);
    e = e.getComponent(c["default"]);
    null !== e && e.onRefresh(t, o);
  });
}, _.prototype.freshArea = function (e, t) {
  if (!e.isNullRange()) {
    var o = Math.floor(e.left),
        n = Math.floor(e.right);
    if (0 <= t) for (var i = o; i <= n; i++) {
      var a = i;
      this.freshItemInFrames(a);
    } else for (i = n; o <= i; i--) {
      a = i, this.freshItemInFrames(a);
    }
  }
}, _.prototype.freshFinish = function (e) {
  this.last_visible_range = e;
}, _.prototype.calculatePos = function (e, t) {
  t = this.layout_obj.getPosByIndex(t);
  e.setPosition(t.x, t.y, 0);
}, _.prototype.getCurVisibleIndex = function () {
  var e = new d.MathSection(),
      t = 0,
      o = 0,
      n = 0;
  this.grid_view_type === r.GRID_VERTICAL ? (t = this.content.y, o = this.layout_obj.item_size.y + this.layout_obj.space.y, n = this.content.height) : this.grid_view_type === r.GRID_HORIZONTAL && (t = -this.content.x, o = this.layout_obj.item_size.x + this.layout_obj.space.x, n = this.content.width);
  var i = new d.MathSection();
  i.left = t, i.right = i.left + this.viewport_length;
  t = new d.MathSection();
  t.left = 0, t.right = t.left + n;
  i = i.and(t);
  return i.isNullRange() || 0 === i.length() || i.left === i.right || (t = Math.floor(i.left / o), e.left = this.key_count * t, o = Math.ceil(i.right / o), e.right = o * this.key_count - 1, e.right = u.MathUtils.Clamp(e.right, 0, this.layout_obj.count - 1)), e;
}, _.prototype.onScrolling = function () {
  this.refresh();
}, _.prototype.refresh = function () {
  var e = this.getCurVisibleIndex(),
      t = e.and(this.last_visible_range),
      o = t.Invert(this.last_visible_range);
  if (!o.isNullRange()) for (var n = Math.floor(o.left), i = Math.floor(o.right), a = n; a <= i; a++) {
    this.pool_array.getObj(a, !1).active = !1, this._freshWorks.removeWork(a);
  }
  n = t.Invert(e);
  n.isNullRange() || this.freshArea(n, this.compareSection(n, t)), this.freshFinish(e);
}, _.prototype.compareSection = function (e, t) {
  return e.isNullRange() || !t.isNullRange() && e.left < t.left ? -1 : 1;
}, a([t({
  type: cc.Enum(r),
  tooltip: "水平/竖直"
})], _.prototype, "grid_view_type", void 0), a([t({
  type: cc.Enum(l.LAYOUT_HORIZONTAL_TYPE),
  tooltip: "水平对齐方式 - 左 / 中 / 右"
})], _.prototype, "horizontal_layout", void 0), a([t({
  type: cc.Enum(l.LAYOUT_VERTICAL_TYPE),
  tooltip: "竖直对齐方式 - 上 / 中 / 下"
})], _.prototype, "vertical_layout", void 0), a([t({
  tooltip: "cell之间的水平/竖直间距"
})], _.prototype, "space", void 0), a([t({
  type: cc.ScrollView
})], _.prototype, "scrollview", void 0), a([t({
  type: cc.Prefab,
  tooltip: "cell的预制物"
})], _.prototype, "templete", void 0), a([t({
  type: cc.Integer,
  min: 1,
  tooltip: "行列数,当GRID_TYPE为水平时,值只会为1"
})], _.prototype, "key_count", void 0), a([t({
  type: cc.Node,
  tooltip: "",
  readonly: !0
})], _.prototype, "content", void 0), a([t], _.prototype, "enableAutoScale", void 0), a([y, e("UtilComponent/GridView")], _));

function _() {
  var e = null !== g && g.apply(this, arguments) || this;
  return e.grid_view_type = r.GRID_VERTICAL, e.horizontal_layout = l.LAYOUT_HORIZONTAL_TYPE.CENTER, e.vertical_layout = l.LAYOUT_VERTICAL_TYPE.TOP, e.space = cc.Vec2.ZERO, e.scrollview = null, e.templete = null, e.key_count = 1, e.content = null, e.enableAutoScale = !0, e.dataCallBack = null, e.viewport_length = 0, e.data_list = [], e.layout_obj = null, e._autoScaleComponent = null, e._scaleRatio = 1, e.last_visible_range = new d.MathSection(), e.pool_array = new s.PoolArray(), e.has_init = !1, e._scrollEnabled = !0, e._freshWorks = new h.GridViewFreshWork(), e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,