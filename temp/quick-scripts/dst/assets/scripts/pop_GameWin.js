
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/pop_GameWin.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'eb3d8dDMElDE65k/6nNWMrc', 'pop_GameWin');
// scripts/pop_GameWin.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    c = e("BaseSdk"),
    l = e("PlatformFun"),
    p = e("pop"),
    t = cc._decorator,
    e = t.ccclass,
    t = t.property,
    e = (r = p["default"], i(d, r), d.prototype.start = function () {
  if (this.labelArr[0].string = s["default"].data.getCoin + "", l.PlatformFun.SendEvent(s["default"].GScene.getModeStr() + "level_victory"), s["default"].PF == c.GAMEPF.WX) {
    var e = this.nodeArr[0].parent.getComponent(cc.Layout);
    e.type = cc.Layout.Type.HORIZONTAL, e.spacingX = 39;

    for (var t = e.spacingY = 0; t < e.node.childrenCount; t++) {
      e.node.children[t].y = -46.5;
    }

    var o = s["default"].GetProbability(s["default"].CONFIG_INFO.RewardProbability || 0);
    this.toggle && (this.toggle.isChecked = o), this.onSwitchReward();
  } else this.toggle && (this.toggle.node.active = !1);

  s["default"].PF == c.GAMEPF.ADR_XM && l.PlatformFun.showBannerAd();
}, d.prototype.close = function () {
  r.prototype.close.call(this), l.PlatformFun.SendEvent(s["default"].GScene.getModeStr() + "show_interstitial_reward"), l.PlatformFun.showInterstitialAd();
}, d.prototype.onSwitchReward = function () {
  this.nodeArr[0].active = this.toggle.isChecked, this.nodeArr[1].active = !this.toggle.isChecked;
}, a([t(cc.Toggle)], d.prototype, "toggle", void 0), a([e], d));

function d() {
  var e = null !== r && r.apply(this, arguments) || this;
  return e.toggle = null, e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,