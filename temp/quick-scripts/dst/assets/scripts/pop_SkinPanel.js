
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/pop_SkinPanel.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b8b28eVhQ9ALIzQsvc6z96A', 'pop_SkinPanel');
// scripts/pop_SkinPanel.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});

var r,
    s = e("AppCommon"),
    c = e("CCTool"),
    l = e("BaseSdk"),
    p = e("PlatformFun"),
    d = e("UserVo"),
    u = e("GridView"),
    f = e("ListenID"),
    h = e("Notifier"),
    m = e("Cfg"),
    y = e("SkinCfg"),
    g = e("pop"),
    _ = e("SkinCtrl"),
    t = cc._decorator,
    e = t.ccclass,
    t = t.property,
    e = (r = g["default"], i(v, r), v.prototype.onEnable = function () {
  h.Notifier.changeListener(!0, f.ListenID.Skin_SelectSkinTypeId, this.onSelectSkinType, this), h.Notifier.changeListener(!0, f.ListenID.Skin_SelectSkinId, this.onSelectSkin, this);
}, v.prototype.onDisable = function () {
  h.Notifier.changeListener(!1, f.ListenID.Skin_SelectSkinTypeId, this.onSelectSkinType, this), h.Notifier.changeListener(!1, f.ListenID.Skin_SelectSkinId, this.onSelectSkin, this);
}, v.prototype.getList = function () {
  var e,
      t = m.Cfg.RoleMan.getAll();

  for (e in t) {
    d.UserVo.getSkin(t[e].id) && this.roleList.push(t[e]);
  }

  this.roleList.sort(function (e, t) {
    return e.sequence - t.sequence;
  }), this.ghostList.length = 0;

  for (var o = m.Cfg.RoleGhost.filter({}), n = (e = 0, o.length); e < n; e++) {
    d.UserVo.getSkin(o[e].id) && this.ghostList.push(o[e]);
  }

  this.ghostList.sort(function (e, t) {
    return e.sequence - t.sequence;
  }), this.selectPageIndex = 1, this.selectIndex = 0, s["default"].SkinCtrl.selectTypeId = _.SkinType.HAT, s["default"].SkinCtrl.selectSkinId = d.UserVo.data.useSkinData[0].useHat || y.SkinDefine.RoleDefaultHat, this.loadRoleInfo(this.selectIndex), this.loadTypeList(), this.loadSkinList();
}, v.prototype.getSelectSkinIndex = function (e) {
  for (var t = 1 == e ? this.roleList : this.ghostList, o = 1 == e ? d.UserVo.useSkin : d.UserVo.useBossSkin, n = 0, i = 0, a = t.length; i < a; i++) {
    if (t[i].id == o) {
      n = i;
      break;
    }
  }

  return n;
}, v.prototype.loadRoleInfo = function () {
  var e = 1 === this.selectPageIndex ? m.Cfg.RoleMan.get(d.UserVo.useSkin) : m.Cfg.RoleGhost.get(d.UserVo.useBossSkin);
  this.selectItem = e, this.roleSkeleton.setAnimation(0, "idle", !0), this.roleSkeleton.node.scale = 1 === this.selectPageIndex ? 2 : 1, this.updateRoleSkin();
}, v.prototype.updateRoleSkin = function () {
  var e = 1 === this.selectPageIndex ? _.RoleSkinType.ROLE : _.RoleSkinType.BOSS,
      t = 1 == this.selectPageIndex ? 0 : 1,
      t = d.UserVo.data.useSkinData[t];
  s["default"].SkinCtrl.setRoleClothes(e, this.roleSkeleton, this.selectItem.id, t.useClothes), s["default"].SkinCtrl.setRoleHead(e, this.roleSkeleton, this.selectItem.id), s["default"].SkinCtrl.setRoleHat(e, this.roleSkeleton, t.useHat), s["default"].SkinCtrl.setRoleWing(e, this.roleSkeleton, t.useWing);
}, v.prototype.loadTypeList = function () {
  this.gridBigView.loadData(s["default"].SkinCtrl.BigList);
}, v.prototype.loadSkinList = function () {
  var e = (1 == this.selectPageIndex ? s["default"].SkinCtrl.roleSkinDataCfg : s["default"].SkinCtrl.bossSkinDataCfg)[s["default"].SkinCtrl.selectTypeId];
  this.gridView.loadData(e);
}, v.prototype.onSelectSkinType = function (e) {
  s["default"].SkinCtrl.selectTypeId = e;
  var t = 1 == this.selectPageIndex ? 0 : 1,
      t = d.UserVo.data.useSkinData[t],
      e = _.TypeToName[e];
  s["default"].SkinCtrl.selectSkinId = t[e], this.gridBigView.doFresh(), this.loadSkinList();
}, v.prototype.setPoint = function () {
  var e,
      t = this.nodeArr[3].children;

  for (e in t) {
    t[e].active = !1;
  }

  for (e in 1 === this.selectPageIndex ? this.roleList : this.ghostList) {
    var o = t[e];
    o || (o = cc.instantiate(t[0])).setParent(this.nodeArr[3]), o.opacity = this.selectIndex == +e ? 200 : 100, o.active = !0;
  }
}, v.prototype.onSelectSkin = function (e) {
  s["default"].SkinCtrl.selectSkinId = e, s["default"].SkinCtrl.wearSkin(e), this.loadSkinList(), this.updateRoleSkin();
}, v.prototype.onButton = function (e, t) {
  var o = this;

  switch (e && c.CCTool.Audio.Player("Click"), t) {
    case "Close":
      this.close();
      break;

    case "Prev":
      this.loadRoleInfo(this.selectIndex - 1);
      break;

    case "Next":
      this.loadRoleInfo(this.selectIndex + 1);
      break;

    case "Unlock":
      p.PlatformFun.loadRewardedVideoAd({
        onVideoSuccess: function onVideoSuccess() {
          o.loadRoleInfo(o.selectIndex);
        },
        loadSuccess: function loadSuccess() {}
      });
      break;

    case "Toggle":
      var n = Number(e.node.name.substring(6));
      this.selectPageIndex = n, this.loadRoleInfo(0);
  }
}, a([t(sp.Skeleton)], v.prototype, "roleSkeleton", void 0), a([t(u["default"])], v.prototype, "gridView", void 0), a([t(u["default"])], v.prototype, "gridBigView", void 0), a([t(cc.Node)], v.prototype, "colormask", void 0), a([e], v));

function v() {
  var t = null !== r && r.apply(this, arguments) || this;
  return t.roleSkeleton = null, t.gridView = null, t.gridBigView = null, t.colormask = null, t.selectIndex = 0, t.selectPageIndex = 0, t.roleList = [], t.ghostList = [], t.initFun = {
    pop_SkinPanel: function pop_SkinPanel() {
      t.getList(), s["default"].PF == l.GAMEPF.ADR_XM && p.PlatformFun.showBannerAd(), t.colormask.opacity = 0;
      var e = cc.tween().to(.05, {
        opacity: 50
      }).to(.1, {
        opacity: 0
      });
      cc.tween(t.colormask).delay(3).repeat(3, e).union().repeatForever().start(), p.PlatformFun.SendEvent("skin_icon_click");
    }
  }, t;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccG9wX1NraW5QYW5lbC5qcyJdLCJuYW1lcyI6WyJlIiwicmVxdWlyZSIsInQiLCJtb2R1bGUiLCJvIiwiZXhwb3J0cyIsIm4iLCJpIiwiX19leHRlbmRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiYSIsIl9fZGVjb3JhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwicyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjIiwibCIsInAiLCJkIiwidSIsImYiLCJoIiwibSIsInkiLCJnIiwiXyIsImNjIiwiX2RlY29yYXRvciIsImNjY2xhc3MiLCJwcm9wZXJ0eSIsInYiLCJvbkVuYWJsZSIsIk5vdGlmaWVyIiwiY2hhbmdlTGlzdGVuZXIiLCJMaXN0ZW5JRCIsIlNraW5fU2VsZWN0U2tpblR5cGVJZCIsIm9uU2VsZWN0U2tpblR5cGUiLCJTa2luX1NlbGVjdFNraW5JZCIsIm9uU2VsZWN0U2tpbiIsIm9uRGlzYWJsZSIsImdldExpc3QiLCJDZmciLCJSb2xlTWFuIiwiZ2V0QWxsIiwiVXNlclZvIiwiZ2V0U2tpbiIsImlkIiwicm9sZUxpc3QiLCJwdXNoIiwic29ydCIsInNlcXVlbmNlIiwiZ2hvc3RMaXN0IiwiUm9sZUdob3N0IiwiZmlsdGVyIiwic2VsZWN0UGFnZUluZGV4Iiwic2VsZWN0SW5kZXgiLCJTa2luQ3RybCIsInNlbGVjdFR5cGVJZCIsIlNraW5UeXBlIiwiSEFUIiwic2VsZWN0U2tpbklkIiwiZGF0YSIsInVzZVNraW5EYXRhIiwidXNlSGF0IiwiU2tpbkRlZmluZSIsIlJvbGVEZWZhdWx0SGF0IiwibG9hZFJvbGVJbmZvIiwibG9hZFR5cGVMaXN0IiwibG9hZFNraW5MaXN0IiwiZ2V0U2VsZWN0U2tpbkluZGV4IiwidXNlU2tpbiIsInVzZUJvc3NTa2luIiwiZ2V0Iiwic2VsZWN0SXRlbSIsInJvbGVTa2VsZXRvbiIsInNldEFuaW1hdGlvbiIsIm5vZGUiLCJzY2FsZSIsInVwZGF0ZVJvbGVTa2luIiwiUm9sZVNraW5UeXBlIiwiUk9MRSIsIkJPU1MiLCJzZXRSb2xlQ2xvdGhlcyIsInVzZUNsb3RoZXMiLCJzZXRSb2xlSGVhZCIsInNldFJvbGVIYXQiLCJzZXRSb2xlV2luZyIsInVzZVdpbmciLCJncmlkQmlnVmlldyIsImxvYWREYXRhIiwiQmlnTGlzdCIsInJvbGVTa2luRGF0YUNmZyIsImJvc3NTa2luRGF0YUNmZyIsImdyaWRWaWV3IiwiVHlwZVRvTmFtZSIsImRvRnJlc2giLCJzZXRQb2ludCIsIm5vZGVBcnIiLCJjaGlsZHJlbiIsImFjdGl2ZSIsImluc3RhbnRpYXRlIiwic2V0UGFyZW50Iiwib3BhY2l0eSIsIndlYXJTa2luIiwib25CdXR0b24iLCJDQ1Rvb2wiLCJBdWRpbyIsIlBsYXllciIsImNsb3NlIiwiUGxhdGZvcm1GdW4iLCJsb2FkUmV3YXJkZWRWaWRlb0FkIiwib25WaWRlb1N1Y2Nlc3MiLCJsb2FkU3VjY2VzcyIsIk51bWJlciIsIm5hbWUiLCJzdWJzdHJpbmciLCJzcCIsIlNrZWxldG9uIiwiTm9kZSIsImFwcGx5IiwiY29sb3JtYXNrIiwiaW5pdEZ1biIsInBvcF9Ta2luUGFuZWwiLCJQRiIsIkdBTUVQRiIsIkFEUl9YTSIsInNob3dCYW5uZXJBZCIsInR3ZWVuIiwidG8iLCJkZWxheSIsInJlcGVhdCIsInVuaW9uIiwicmVwZWF0Rm9yZXZlciIsInN0YXJ0IiwiU2VuZEV2ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUMsR0FBQ0MsT0FBTjtBQUNBLElBQUlDLENBQUMsR0FBQ0MsTUFBTjtBQUNBLElBQUlDLENBQUMsR0FBQ0MsT0FBTjtBQUNBOztBQUFhLElBQUlDLEVBQUo7QUFBQSxJQUFNQyxD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SSxPQUFGLEdBQVU7QUFBQ0MsSUFBQUEsYUFBYSxFQUFDLHlCQUFVO0FBQUN0SSxNQUFBQSxDQUFDLENBQUNvRCxPQUFGLElBQVk1QixDQUFDLFdBQUQsQ0FBVStHLEVBQVYsSUFBYzNHLENBQUMsQ0FBQzRHLE1BQUYsQ0FBU0MsTUFBdkIsSUFBK0I1RyxDQUFDLENBQUM0RixXQUFGLENBQWNpQixZQUFkLEVBQTNDLEVBQXdFMUksQ0FBQyxDQUFDb0ksU0FBRixDQUFZbEIsT0FBWixHQUFvQixDQUE1RjtBQUE4RixVQUFJcEgsQ0FBQyxHQUFDd0MsRUFBRSxDQUFDcUcsS0FBSCxHQUFXQyxFQUFYLENBQWMsR0FBZCxFQUFrQjtBQUFDMUIsUUFBQUEsT0FBTyxFQUFDO0FBQVQsT0FBbEIsRUFBZ0MwQixFQUFoQyxDQUFtQyxFQUFuQyxFQUFzQztBQUFDMUIsUUFBQUEsT0FBTyxFQUFDO0FBQVQsT0FBdEMsQ0FBTjtBQUF5RDVFLE1BQUFBLEVBQUUsQ0FBQ3FHLEtBQUgsQ0FBUzNJLENBQUMsQ0FBQ29JLFNBQVgsRUFBc0JTLEtBQXRCLENBQTRCLENBQTVCLEVBQStCQyxNQUEvQixDQUFzQyxDQUF0QyxFQUF3Q2hKLENBQXhDLEVBQTJDaUosS0FBM0MsR0FBbURDLGFBQW5ELEdBQW1FQyxLQUFuRSxJQUEyRXBILENBQUMsQ0FBQzRGLFdBQUYsQ0FBY3lCLFNBQWQsQ0FBd0IsaUJBQXhCLENBQTNFO0FBQXNIO0FBQXZTLEdBQW5KLEVBQTRibEosQ0FBbmM7QUFBcWM7O0FBQUFFLENBQUMsV0FBRCxHQUFVSixDQUFWIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZT1yZXF1aXJlO1xudmFyIHQ9bW9kdWxlO1xudmFyIG89ZXhwb3J0cztcblwidXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBvIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBvKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihvLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgbyl9KSxhPXRoaXMmJnRoaXMuX19kZWNvcmF0ZXx8ZnVuY3Rpb24oZSx0LG8sbil7dmFyIGksYT1hcmd1bWVudHMubGVuZ3RoLHI9YTwzP3Q6bnVsbD09PW4/bj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsbyk6bjtpZihcIm9iamVjdFwiPT10eXBlb2YgUmVmbGVjdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSlyPVJlZmxlY3QuZGVjb3JhdGUoZSx0LG8sbik7ZWxzZSBmb3IodmFyIHM9ZS5sZW5ndGgtMTswPD1zO3MtLSkoaT1lW3NdKSYmKHI9KGE8Mz9pKHIpOjM8YT9pKHQsbyxyKTppKHQsbykpfHxyKTtyZXR1cm4gMzxhJiZyJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxvLHIpLHJ9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByLHM9ZShcIkFwcENvbW1vblwiKSxjPWUoXCJDQ1Rvb2xcIiksbD1lKFwiQmFzZVNka1wiKSxwPWUoXCJQbGF0Zm9ybUZ1blwiKSxkPWUoXCJVc2VyVm9cIiksdT1lKFwiR3JpZFZpZXdcIiksZj1lKFwiTGlzdGVuSURcIiksaD1lKFwiTm90aWZpZXJcIiksbT1lKFwiQ2ZnXCIpLHk9ZShcIlNraW5DZmdcIiksZz1lKFwicG9wXCIpLF89ZShcIlNraW5DdHJsXCIpLHQ9Y2MuX2RlY29yYXRvcixlPXQuY2NjbGFzcyx0PXQucHJvcGVydHksZT0ocj1nLmRlZmF1bHQsaSh2LHIpLHYucHJvdG90eXBlLm9uRW5hYmxlPWZ1bmN0aW9uKCl7aC5Ob3RpZmllci5jaGFuZ2VMaXN0ZW5lcighMCxmLkxpc3RlbklELlNraW5fU2VsZWN0U2tpblR5cGVJZCx0aGlzLm9uU2VsZWN0U2tpblR5cGUsdGhpcyksaC5Ob3RpZmllci5jaGFuZ2VMaXN0ZW5lcighMCxmLkxpc3RlbklELlNraW5fU2VsZWN0U2tpbklkLHRoaXMub25TZWxlY3RTa2luLHRoaXMpfSx2LnByb3RvdHlwZS5vbkRpc2FibGU9ZnVuY3Rpb24oKXtoLk5vdGlmaWVyLmNoYW5nZUxpc3RlbmVyKCExLGYuTGlzdGVuSUQuU2tpbl9TZWxlY3RTa2luVHlwZUlkLHRoaXMub25TZWxlY3RTa2luVHlwZSx0aGlzKSxoLk5vdGlmaWVyLmNoYW5nZUxpc3RlbmVyKCExLGYuTGlzdGVuSUQuU2tpbl9TZWxlY3RTa2luSWQsdGhpcy5vblNlbGVjdFNraW4sdGhpcyl9LHYucHJvdG90eXBlLmdldExpc3Q9ZnVuY3Rpb24oKXt2YXIgZSx0PW0uQ2ZnLlJvbGVNYW4uZ2V0QWxsKCk7Zm9yKGUgaW4gdClkLlVzZXJWby5nZXRTa2luKHRbZV0uaWQpJiZ0aGlzLnJvbGVMaXN0LnB1c2godFtlXSk7dGhpcy5yb2xlTGlzdC5zb3J0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuc2VxdWVuY2UtdC5zZXF1ZW5jZX0pLHRoaXMuZ2hvc3RMaXN0Lmxlbmd0aD0wO2Zvcih2YXIgbz1tLkNmZy5Sb2xlR2hvc3QuZmlsdGVyKHt9KSxuPShlPTAsby5sZW5ndGgpO2U8bjtlKyspZC5Vc2VyVm8uZ2V0U2tpbihvW2VdLmlkKSYmdGhpcy5naG9zdExpc3QucHVzaChvW2VdKTt0aGlzLmdob3N0TGlzdC5zb3J0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuc2VxdWVuY2UtdC5zZXF1ZW5jZX0pLHRoaXMuc2VsZWN0UGFnZUluZGV4PTEsdGhpcy5zZWxlY3RJbmRleD0wLHMuZGVmYXVsdC5Ta2luQ3RybC5zZWxlY3RUeXBlSWQ9Xy5Ta2luVHlwZS5IQVQscy5kZWZhdWx0LlNraW5DdHJsLnNlbGVjdFNraW5JZD1kLlVzZXJWby5kYXRhLnVzZVNraW5EYXRhWzBdLnVzZUhhdHx8eS5Ta2luRGVmaW5lLlJvbGVEZWZhdWx0SGF0LHRoaXMubG9hZFJvbGVJbmZvKHRoaXMuc2VsZWN0SW5kZXgpLHRoaXMubG9hZFR5cGVMaXN0KCksdGhpcy5sb2FkU2tpbkxpc3QoKX0sdi5wcm90b3R5cGUuZ2V0U2VsZWN0U2tpbkluZGV4PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xPT1lP3RoaXMucm9sZUxpc3Q6dGhpcy5naG9zdExpc3Qsbz0xPT1lP2QuVXNlclZvLnVzZVNraW46ZC5Vc2VyVm8udXNlQm9zc1NraW4sbj0wLGk9MCxhPXQubGVuZ3RoO2k8YTtpKyspaWYodFtpXS5pZD09byl7bj1pO2JyZWFrfXJldHVybiBufSx2LnByb3RvdHlwZS5sb2FkUm9sZUluZm89ZnVuY3Rpb24oKXt2YXIgZT0xPT09dGhpcy5zZWxlY3RQYWdlSW5kZXg/bS5DZmcuUm9sZU1hbi5nZXQoZC5Vc2VyVm8udXNlU2tpbik6bS5DZmcuUm9sZUdob3N0LmdldChkLlVzZXJWby51c2VCb3NzU2tpbik7dGhpcy5zZWxlY3RJdGVtPWUsdGhpcy5yb2xlU2tlbGV0b24uc2V0QW5pbWF0aW9uKDAsXCJpZGxlXCIsITApLHRoaXMucm9sZVNrZWxldG9uLm5vZGUuc2NhbGU9MT09PXRoaXMuc2VsZWN0UGFnZUluZGV4PzI6MSx0aGlzLnVwZGF0ZVJvbGVTa2luKCl9LHYucHJvdG90eXBlLnVwZGF0ZVJvbGVTa2luPWZ1bmN0aW9uKCl7dmFyIGU9MT09PXRoaXMuc2VsZWN0UGFnZUluZGV4P18uUm9sZVNraW5UeXBlLlJPTEU6Xy5Sb2xlU2tpblR5cGUuQk9TUyx0PTE9PXRoaXMuc2VsZWN0UGFnZUluZGV4PzA6MSx0PWQuVXNlclZvLmRhdGEudXNlU2tpbkRhdGFbdF07cy5kZWZhdWx0LlNraW5DdHJsLnNldFJvbGVDbG90aGVzKGUsdGhpcy5yb2xlU2tlbGV0b24sdGhpcy5zZWxlY3RJdGVtLmlkLHQudXNlQ2xvdGhlcykscy5kZWZhdWx0LlNraW5DdHJsLnNldFJvbGVIZWFkKGUsdGhpcy5yb2xlU2tlbGV0b24sdGhpcy5zZWxlY3RJdGVtLmlkKSxzLmRlZmF1bHQuU2tpbkN0cmwuc2V0Um9sZUhhdChlLHRoaXMucm9sZVNrZWxldG9uLHQudXNlSGF0KSxzLmRlZmF1bHQuU2tpbkN0cmwuc2V0Um9sZVdpbmcoZSx0aGlzLnJvbGVTa2VsZXRvbix0LnVzZVdpbmcpfSx2LnByb3RvdHlwZS5sb2FkVHlwZUxpc3Q9ZnVuY3Rpb24oKXt0aGlzLmdyaWRCaWdWaWV3LmxvYWREYXRhKHMuZGVmYXVsdC5Ta2luQ3RybC5CaWdMaXN0KX0sdi5wcm90b3R5cGUubG9hZFNraW5MaXN0PWZ1bmN0aW9uKCl7dmFyIGU9KDE9PXRoaXMuc2VsZWN0UGFnZUluZGV4P3MuZGVmYXVsdC5Ta2luQ3RybC5yb2xlU2tpbkRhdGFDZmc6cy5kZWZhdWx0LlNraW5DdHJsLmJvc3NTa2luRGF0YUNmZylbcy5kZWZhdWx0LlNraW5DdHJsLnNlbGVjdFR5cGVJZF07dGhpcy5ncmlkVmlldy5sb2FkRGF0YShlKX0sdi5wcm90b3R5cGUub25TZWxlY3RTa2luVHlwZT1mdW5jdGlvbihlKXtzLmRlZmF1bHQuU2tpbkN0cmwuc2VsZWN0VHlwZUlkPWU7dmFyIHQ9MT09dGhpcy5zZWxlY3RQYWdlSW5kZXg/MDoxLHQ9ZC5Vc2VyVm8uZGF0YS51c2VTa2luRGF0YVt0XSxlPV8uVHlwZVRvTmFtZVtlXTtzLmRlZmF1bHQuU2tpbkN0cmwuc2VsZWN0U2tpbklkPXRbZV0sdGhpcy5ncmlkQmlnVmlldy5kb0ZyZXNoKCksdGhpcy5sb2FkU2tpbkxpc3QoKX0sdi5wcm90b3R5cGUuc2V0UG9pbnQ9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMubm9kZUFyclszXS5jaGlsZHJlbjtmb3IoZSBpbiB0KXRbZV0uYWN0aXZlPSExO2ZvcihlIGluIDE9PT10aGlzLnNlbGVjdFBhZ2VJbmRleD90aGlzLnJvbGVMaXN0OnRoaXMuZ2hvc3RMaXN0KXt2YXIgbz10W2VdO298fChvPWNjLmluc3RhbnRpYXRlKHRbMF0pKS5zZXRQYXJlbnQodGhpcy5ub2RlQXJyWzNdKSxvLm9wYWNpdHk9dGhpcy5zZWxlY3RJbmRleD09K2U/MjAwOjEwMCxvLmFjdGl2ZT0hMH19LHYucHJvdG90eXBlLm9uU2VsZWN0U2tpbj1mdW5jdGlvbihlKXtzLmRlZmF1bHQuU2tpbkN0cmwuc2VsZWN0U2tpbklkPWUscy5kZWZhdWx0LlNraW5DdHJsLndlYXJTa2luKGUpLHRoaXMubG9hZFNraW5MaXN0KCksdGhpcy51cGRhdGVSb2xlU2tpbigpfSx2LnByb3RvdHlwZS5vbkJ1dHRvbj1mdW5jdGlvbihlLHQpe3ZhciBvPXRoaXM7c3dpdGNoKGUmJmMuQ0NUb29sLkF1ZGlvLlBsYXllcihcIkNsaWNrXCIpLHQpe2Nhc2VcIkNsb3NlXCI6dGhpcy5jbG9zZSgpO2JyZWFrO2Nhc2VcIlByZXZcIjp0aGlzLmxvYWRSb2xlSW5mbyh0aGlzLnNlbGVjdEluZGV4LTEpO2JyZWFrO2Nhc2VcIk5leHRcIjp0aGlzLmxvYWRSb2xlSW5mbyh0aGlzLnNlbGVjdEluZGV4KzEpO2JyZWFrO2Nhc2VcIlVubG9ja1wiOnAuUGxhdGZvcm1GdW4ubG9hZFJld2FyZGVkVmlkZW9BZCh7b25WaWRlb1N1Y2Nlc3M6ZnVuY3Rpb24oKXtvLmxvYWRSb2xlSW5mbyhvLnNlbGVjdEluZGV4KX0sbG9hZFN1Y2Nlc3M6ZnVuY3Rpb24oKXt9fSk7YnJlYWs7Y2FzZVwiVG9nZ2xlXCI6dmFyIG49TnVtYmVyKGUubm9kZS5uYW1lLnN1YnN0cmluZyg2KSk7dGhpcy5zZWxlY3RQYWdlSW5kZXg9bix0aGlzLmxvYWRSb2xlSW5mbygwKX19LGEoW3Qoc3AuU2tlbGV0b24pXSx2LnByb3RvdHlwZSxcInJvbGVTa2VsZXRvblwiLHZvaWQgMCksYShbdCh1LmRlZmF1bHQpXSx2LnByb3RvdHlwZSxcImdyaWRWaWV3XCIsdm9pZCAwKSxhKFt0KHUuZGVmYXVsdCldLHYucHJvdG90eXBlLFwiZ3JpZEJpZ1ZpZXdcIix2b2lkIDApLGEoW3QoY2MuTm9kZSldLHYucHJvdG90eXBlLFwiY29sb3JtYXNrXCIsdm9pZCAwKSxhKFtlXSx2KSk7ZnVuY3Rpb24gdigpe3ZhciB0PW51bGwhPT1yJiZyLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpcztyZXR1cm4gdC5yb2xlU2tlbGV0b249bnVsbCx0LmdyaWRWaWV3PW51bGwsdC5ncmlkQmlnVmlldz1udWxsLHQuY29sb3JtYXNrPW51bGwsdC5zZWxlY3RJbmRleD0wLHQuc2VsZWN0UGFnZUluZGV4PTAsdC5yb2xlTGlzdD1bXSx0Lmdob3N0TGlzdD1bXSx0LmluaXRGdW49e3BvcF9Ta2luUGFuZWw6ZnVuY3Rpb24oKXt0LmdldExpc3QoKSxzLmRlZmF1bHQuUEY9PWwuR0FNRVBGLkFEUl9YTSYmcC5QbGF0Zm9ybUZ1bi5zaG93QmFubmVyQWQoKSx0LmNvbG9ybWFzay5vcGFjaXR5PTA7dmFyIGU9Y2MudHdlZW4oKS50byguMDUse29wYWNpdHk6NTB9KS50byguMSx7b3BhY2l0eTowfSk7Y2MudHdlZW4odC5jb2xvcm1hc2spLmRlbGF5KDMpLnJlcGVhdCgzLGUpLnVuaW9uKCkucmVwZWF0Rm9yZXZlcigpLnN0YXJ0KCkscC5QbGF0Zm9ybUZ1bi5TZW5kRXZlbnQoXCJza2luX2ljb25fY2xpY2tcIil9fSx0fW8uZGVmYXVsdD1lIl19