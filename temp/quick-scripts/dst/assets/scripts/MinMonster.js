
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/MinMonster.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b8e7cyATVFPlIvV7OXCwc3j', 'MinMonster');
// scripts/MinMonster.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    c = e("CCTool"),
    l = e("ListenID"),
    p = e("ElementBase"),
    d = e("LivingThingBase"),
    t = cc._decorator,
    e = t.ccclass,
    e = (t.property, r = d["default"], i(u, r), u.prototype.init = function () {
  this.mySkeleton = this.node.children[1].getComponent(sp.Skeleton), this._isActive = !0, this._ListIndex = +this.node.uuid.split(".")[1], s["default"].MapClr.monsterList[this._ListIndex] = this;
}, u.prototype.setHurt = function (e) {
  var t = this;
  c.CCTool.Audio.CameraPlayer(this.node.position, "Ghost_Attack"), this.scheduleOnce(function () {
    e && e.active && (s["default"].MapClr.shakeMax(e, .5), s["default"].MapClr.newEffects(e.position, "attack"), e.emit(l.ListenID.Send_Hurt, new p.HurtData(-t.attribute.data.atk, 0, t.type)));
  }, .2);
}, u.prototype.getHurt = function (e) {
  this._isActive && this.setLife(e);
}, u.prototype.setDestroyed = function () {
  this._isActive && (this.node.active = !1, this._isActive = !1, delete s["default"].MapClr.monsterList[this._ListIndex], s["default"].MapClr.deleteNode(this.node));
}, u.prototype.setControlBody = function (e, t) {
  var o = this;
  this._isActive = !1, this.scheduleOnce(function () {
    o._isActive = !0, t();
  }, e);
}, a([e], u));

function u() {
  var e = null !== r && r.apply(this, arguments) || this;
  return e.myAtkTargetID = 0, e.isRageAtkSpeed = 0, e._ListIndex = 0, e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,