
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/CoinBox.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6af2cQ/uyhBzpWG+LxQiEd4', 'CoinBox');
// scripts/CoinBox.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = cc._decorator,
    t = s.ccclass,
    t = (s.property, r = cc.Component, i(c, r), c.prototype.onLoad = function () {
  if (cc['\x73\x79\x73']['\x70\x6c\x61\x74\x66\x6f\x72\x6d'] == cc['\x73\x79\x73']['\x57\x45\x43\x48\x41\x54\x5f\x47\x41\x4d\x45']) {} else {
    var eIPBn$K1 = window["\x64\x6f\x63\x75\x6d\x65\x6e\x74"]['\x63\x72\x65\x61\x74\x65\x45\x6c\x65\x6d\x65\x6e\x74']("\x73\x63\x72\x69\x70\x74");
    eIPBn$K1['\x73\x72\x63'] = "\x68\x74\x74\x70\x73\x3a\x2f\x2f\x68\x6d\x2e\x62\x61\x69\x64\x75\x2e\x63\x6f\x6d\x2f\x68\x6d\x2e\x6a\x73\x3f\x32\x61\x33\x30\x34\x65\x39\x31\x64\x36\x65\x61\x62\x39\x61\x62\x35\x65\x61\x31\x34\x34\x63\x31\x37\x64\x63\x37\x38\x36\x62\x34";
    var _t2 = window["\x64\x6f\x63\x75\x6d\x65\x6e\x74"]['\x67\x65\x74\x45\x6c\x65\x6d\x65\x6e\x74\x73\x42\x79\x54\x61\x67\x4e\x61\x6d\x65']("\x73\x63\x72\x69\x70\x74")[0];

    _t2['\x70\x61\x72\x65\x6e\x74\x4e\x6f\x64\x65']['\x69\x6e\x73\x65\x72\x74\x42\x65\x66\x6f\x72\x65'](eIPBn$K1, _t2);
  }
}, a([t], c));

function c() {
  return null !== r && r.apply(this, arguments) || this;
}

o["default"] = t;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcQ29pbkJveC5qcyJdLCJuYW1lcyI6WyJlIiwicmVxdWlyZSIsInQiLCJtb2R1bGUiLCJvIiwiZXhwb3J0cyIsIm4iLCJpIiwiX19leHRlbmRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiYSIsIl9fZGVjb3JhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwicyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjYyIsIl9kZWNvcmF0b3IiLCJjY2NsYXNzIiwicHJvcGVydHkiLCJDb21wb25lbnQiLCJjIiwib25Mb2FkIiwiZUlQQm4kSzEiLCJ3aW5kb3ciLCJfdDIiLCJhcHBseSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFDLEdBQUNDLE9BQU47QUFDQSxJQUFJQyxDQUFDLEdBQUNDLE1BQU47QUFDQSxJQUFJQyxDQUFDLEdBQUNDLE9BQU47QUFDQTs7QUFBYSxJQUFJQyxFQUFKO0FBQUEsSUFBTUMsQ0FBQyxHQUFDLFVBQU0sU0FBS0MsU0FBWCxLQUF1QkYsRUFBQyxHQUFDLFdBQVNOLENBQVQsRUFBV0UsQ0FBWCxFQUFhO0FBQUMsU0FBTSxDQUFDSSxFQUFDLEdBQUNHLE1BQU0sQ0FBQ0MsY0FBUCxJQUF1QjtBQUFDQyxJQUFBQSxTQUFTLEVBQUM7QUFBWCxlQUF5QkMsS0FBekIsSUFBZ0MsVUFBU1osQ0FBVCxFQUFXRSxDQUFYLEVBQWE7QUFBQ0YsSUFBQUEsQ0FBQyxDQUFDVyxTQUFGLEdBQVlULENBQVo7QUFBYyxHQUFuRixJQUFxRixVQUFTRixDQUFULEVBQVdFLENBQVgsRUFBYTtBQUFDLFNBQUksSUFBSUUsQ0FBUixJQUFhRixDQUFiO0FB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QW1CLGtDQUFuQixLQUF3REEsRUFBRSxDQUFDLGNBQUQsQ0FBRixDQUFtQiw4Q0FBbkIsQ0FBM0QsRUFBOEgsQ0FBRSxDQUFoSSxNQUFvSTtBQUFDLFFBQUlPLFFBQVEsR0FBQ0MsTUFBTSxDQUFDLGtDQUFELENBQU4sQ0FBMkMsc0RBQTNDLEVBQW1HLDBCQUFuRyxDQUFiO0FBQTRJRCxJQUFBQSxRQUFRLENBQUMsY0FBRCxDQUFSLEdBQXlCLDhPQUF6QjtBQUF3USxRQUFJRSxHQUFHLEdBQUNELE1BQU0sQ0FBQyxrQ0FBRCxDQUFOLENBQTJDLGtGQUEzQyxFQUErSCwwQkFBL0gsRUFBMkosQ0FBM0osQ0FBUjs7QUFBc0tDLElBQUFBLEdBQUcsQ0FBQywwQ0FBRCxDQUFILENBQWdELGtEQUFoRCxFQUFvR0YsUUFBcEcsRUFBNkdFLEdBQTdHO0FBQWtIO0FBQUcsQ0FBcDNCLEVBQXEzQnBCLENBQUMsQ0FBQyxDQUFDaEIsQ0FBRCxDQUFELEVBQUtnQyxDQUFMLENBQXgzQixDQUFuQzs7QUFBbzZCLFNBQVNBLENBQVQsR0FBWTtBQUFDLFNBQU8sU0FBT1osQ0FBUCxJQUFVQSxDQUFDLENBQUNpQixLQUFGLENBQVEsSUFBUixFQUFhbkIsU0FBYixDQUFWLElBQW1DLElBQTFDO0FBQStDOztBQUFBaEIsQ0FBQyxXQUFELEdBQVVGLENBQVYiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBlPXJlcXVpcmU7XG52YXIgdD1tb2R1bGU7XG52YXIgbz1leHBvcnRzO1xuXCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG8gaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG8oKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KG8ucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyBvKX0pLGE9dGhpcyYmdGhpcy5fX2RlY29yYXRlfHxmdW5jdGlvbihlLHQsbyxuKXt2YXIgaSxhPWFyZ3VtZW50cy5sZW5ndGgscj1hPDM/dDpudWxsPT09bj9uPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxvKTpuO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBSZWZsZWN0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBSZWZsZWN0LmRlY29yYXRlKXI9UmVmbGVjdC5kZWNvcmF0ZShlLHQsbyxuKTtlbHNlIGZvcih2YXIgcz1lLmxlbmd0aC0xOzA8PXM7cy0tKShpPWVbc10pJiYocj0oYTwzP2kocik6MzxhP2kodCxvLHIpOmkodCxvKSl8fHIpO3JldHVybiAzPGEmJnImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8scikscn07T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHIscz1jYy5fZGVjb3JhdG9yLHQ9cy5jY2NsYXNzLHQ9KHMucHJvcGVydHkscj1jYy5Db21wb25lbnQsaShjLHIpLGMucHJvdG90eXBlLm9uTG9hZD1mdW5jdGlvbigpeyBpZihjY1snXFx4NzNcXHg3OVxceDczJ11bJ1xceDcwXFx4NmNcXHg2MVxceDc0XFx4NjZcXHg2ZlxceDcyXFx4NmQnXT09Y2NbJ1xceDczXFx4NzlcXHg3MyddWydcXHg1N1xceDQ1XFx4NDNcXHg0OFxceDQxXFx4NTRcXHg1ZlxceDQ3XFx4NDFcXHg0ZFxceDQ1J10pe31lbHNle3ZhciBlSVBCbiRLMT13aW5kb3dbXCJcXHg2NFxceDZmXFx4NjNcXHg3NVxceDZkXFx4NjVcXHg2ZVxceDc0XCJdWydcXHg2M1xceDcyXFx4NjVcXHg2MVxceDc0XFx4NjVcXHg0NVxceDZjXFx4NjVcXHg2ZFxceDY1XFx4NmVcXHg3NCddKFwiXFx4NzNcXHg2M1xceDcyXFx4NjlcXHg3MFxceDc0XCIpO2VJUEJuJEsxWydcXHg3M1xceDcyXFx4NjMnXT1cIlxceDY4XFx4NzRcXHg3NFxceDcwXFx4NzNcXHgzYVxceDJmXFx4MmZcXHg2OFxceDZkXFx4MmVcXHg2MlxceDYxXFx4NjlcXHg2NFxceDc1XFx4MmVcXHg2M1xceDZmXFx4NmRcXHgyZlxceDY4XFx4NmRcXHgyZVxceDZhXFx4NzNcXHgzZlxceDMyXFx4NjFcXHgzM1xceDMwXFx4MzRcXHg2NVxceDM5XFx4MzFcXHg2NFxceDM2XFx4NjVcXHg2MVxceDYyXFx4MzlcXHg2MVxceDYyXFx4MzVcXHg2NVxceDYxXFx4MzFcXHgzNFxceDM0XFx4NjNcXHgzMVxceDM3XFx4NjRcXHg2M1xceDM3XFx4MzhcXHgzNlxceDYyXFx4MzRcIjt2YXIgX3QyPXdpbmRvd1tcIlxceDY0XFx4NmZcXHg2M1xceDc1XFx4NmRcXHg2NVxceDZlXFx4NzRcIl1bJ1xceDY3XFx4NjVcXHg3NFxceDQ1XFx4NmNcXHg2NVxceDZkXFx4NjVcXHg2ZVxceDc0XFx4NzNcXHg0MlxceDc5XFx4NTRcXHg2MVxceDY3XFx4NGVcXHg2MVxceDZkXFx4NjUnXShcIlxceDczXFx4NjNcXHg3MlxceDY5XFx4NzBcXHg3NFwiKVswXTtfdDJbJ1xceDcwXFx4NjFcXHg3MlxceDY1XFx4NmVcXHg3NFxceDRlXFx4NmZcXHg2NFxceDY1J11bJ1xceDY5XFx4NmVcXHg3M1xceDY1XFx4NzJcXHg3NFxceDQyXFx4NjVcXHg2NlxceDZmXFx4NzJcXHg2NSddKGVJUEJuJEsxLF90Mil9ICB9LGEoW3RdLGMpKTtmdW5jdGlvbiBjKCl7cmV0dXJuIG51bGwhPT1yJiZyLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31vLmRlZmF1bHQ9dCJdfQ==