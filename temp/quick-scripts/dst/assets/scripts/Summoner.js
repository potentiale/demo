
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Summoner.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '01a6dBointJQLM94sWUYS/m', 'Summoner');
// scripts/Summoner.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    c = e("Cfg"),
    l = e("AIMinMonster"),
    p = e("ConstructBase"),
    d = cc._decorator,
    t = d.ccclass,
    e = d.menu,
    e = (d.property, r = p["default"], i(u, r), u.prototype.onInit = function () {
  this.searchEnemy();
  var e = s["default"].MapClr.getMapPos(this.node.position),
      t = s["default"].MapClr.getMapPos(this._enemy.myDoor.node.position),
      o = this.ower.roomID,
      o = s["default"].MapClr.getPath(e, t, o);
  this.path = JSON.stringify(o), this.effectTrigger();
}, u.prototype.searchEnemy = function () {
  for (var e in s["default"].MapClr.roleList) {
    e = s["default"].MapClr.roleList[e];
    if (e.roleID != this.ower.roleID) return void (this._enemy = e);
  }
}, u.prototype.effectTrigger = function () {
  this.newMonster();
}, u.prototype.newMonster = function () {
  var o = this;
  0 <= [17, 18].indexOf(this.attribute.buildingType) && s["default"].MapClr.newEffects(this.node.position, "delivery_" + this.attribute.buildingType);
  var e = {
    id: s["default"].gettimestamp(null, "ms"),
    _pos: {
      x: this.node.x,
      y: this.node.y
    }
  };
  s["default"].MapClr.newMonster(e, "MinMonster", function (e) {
    var t = c.Cfg.Ghost1.get(o.attribute.data.parameter[0]);
    e.initAttribute(t, o.ower), e.setSkin(t.RoleBones, function () {
      19 == o.attribute.buildingType ? (o.mountMonster = e, o.scheduleOnce(function () {
        o.mountMonster = null, o.addAI(e, t);
      }, o.attribute.data.frequency / 2)) : o.addAI(e, t);
    });
  });
}, u.prototype.addAI = function (e, t) {
  e.myFSM = e.addComponent(l["default"]), e.myFSM.path = JSON.parse(this.path), e.myFSM.target = this._enemy, e.myFSM.initState(e, t);
}, u.prototype.onVanish = function () {
  this.mountMonster && this.mountMonster.setDestroyed();
}, a([t, e("gameElement/Summoner")], u));

function u() {
  return null !== r && r.apply(this, arguments) || this;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,