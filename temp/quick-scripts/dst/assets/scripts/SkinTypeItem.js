
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/SkinTypeItem.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f2dbe/a9PRHDrw8FUrj2i0O', 'SkinTypeItem');
// scripts/SkinTypeItem.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    c = e("GridViewCell"),
    l = e("ListenID"),
    p = e("Notifier"),
    d = e("SkinCtrl"),
    t = cc._decorator,
    e = t.ccclass,
    t = t.property,
    e = (r = c["default"], i(u, r), u.prototype.onInit = function () {}, u.prototype.onRefresh = function (e) {
  var o = this;
  this._curIconPath != e.icon && (cc.resources.load(e.icon, cc.SpriteFrame, function (e, t) {
    o.skinTypeIcon && (o.skinTypeIcon.spriteFrame = t);
  }), this._curIconPath = e.icon), this._skinTypeId = e.id, this.selectIcon.color = this._skinTypeId == s["default"].SkinCtrl.selectTypeId ? cc.Color.WHITE.fromHEX("#743934") : cc.Color.WHITE.fromHEX("#BEB8AC"), this.skinTypeIcon.node.color = this._skinTypeId == s["default"].SkinCtrl.selectTypeId ? cc.Color.WHITE : cc.Color.WHITE.fromHEX("#3f3b3a");
}, u.prototype.onClick = function () {
  this._skinTypeId != s["default"].SkinCtrl.selectTypeId && p.Notifier.send(l.ListenID.Skin_SelectSkinTypeId, this._skinTypeId);
}, a([t(cc.Node)], u.prototype, "selectIcon", void 0), a([t(cc.Sprite)], u.prototype, "skinTypeIcon", void 0), a([e], u));

function u() {
  var e = null !== r && r.apply(this, arguments) || this;
  return e.selectIcon = null, e.skinTypeIcon = null, e._curIconPath = "", e._skinTypeId = d.SkinType.HAT, e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,