
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/pop_BuildingUPLv.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c159cB1blJOX5ACwVU5oq7f', 'pop_BuildingUPLv');
// scripts/pop_BuildingUPLv.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    c = e("Cfg"),
    l = e("BuildingContentItem"),
    p = e("pop"),
    t = cc._decorator,
    e = t.ccclass,
    t = t.property,
    e = (r = p["default"], i(d, r), d.prototype.loadList = function (i) {
  var a = this;
  this.contentList.destroyAllChildren(), cc.resources.load("prefab/pop/BuildingContentItem", cc.Prefab, function (e, t) {
    for (var o in i) {
      var n = i[o];
      n.data && ((o = cc.instantiate(t)).setParent(a.contentList), (o = o.getComponent(l["default"])).type = "UPlv", o.init(n.data), o.myArc = a.pdata, o.ower = a, o.onBuilding = function (e, t) {
        "VideoBuy" == t && (s["default"].GScene.player.myUserVideoBuild[e.buildingType] = 1), "Delete" == t ? a.pdata.sell(a._sellID) : a.pdata.upAttribute(), a.close();
      }, n.isVideo ? o.setVideo() : n.isDelete && o.setDelete());
    }
  });
}, a([t(cc.Node)], d.prototype, "contentList", void 0), a([e], d));

function d() {
  var o = null !== r && r.apply(this, arguments) || this;
  return o.contentList = null, o._sellID = 0, o.initFun = {
    pop_BuildingUPLv: function pop_BuildingUPLv() {
      var e = o.pdata.attribute.isMax ? null : c.Cfg.Building1.get(+o.pdata.attribute.data.id + 1);
      o.pdata.ower.roleID != s["default"].GScene.player.roleID && (e = null, o.labelArr[0].string = "出售", o._sellID = s["default"].GScene.player.roleID);
      var t = [{
        data: e
      }];
      s["default"].GScene.player.myUserVideoBuild[o.pdata.attribute.buildingType] || t.push({
        data: e,
        isVideo: !0
      }), [1, 3].indexOf(o.pdata.attribute.buildingType) < 0 && t.push({
        data: o.pdata.attribute.data,
        isDelete: !0
      }), o.loadList(t);
    }
  }, o;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,