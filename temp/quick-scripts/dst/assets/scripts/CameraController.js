
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/CameraController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '79ba93e9LZLdqiXtVn3vq7s', 'CameraController');
// scripts/CameraController.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    t = cc._decorator,
    e = t.ccclass,
    e = (t.property, r = cc.Component, i(c, r), c.prototype.onLoad = function () {
  s["default"].CameraController = this;
}, c.prototype.start = function () {}, c.prototype.update = function () {}, c.prototype.shakeMax = function (e, t) {
  var o = (e = void 0 === e ? s["default"].GScene.GameCamera.node : e).x,
      n = e.y,
      i = t = void 0 === t ? 1 : t;
  this.shakeTween && this.shakeTween.stop(), this.shakeTween = cc.tween(e), 1 <= t ? this.shakeTween.repeat(t, cc.tween().sequence(cc.moveTo(.03, cc.v2(o + (5 + i), n + (i + 7))), cc.moveTo(.03, cc.v2(o - (6 + i), n + (i + 7))), cc.moveTo(.03, cc.v2(o - (13 + i), n + (i + 3))), cc.moveTo(.03, cc.v2(o + (3 + i), n - (6 + i))), cc.moveTo(.03, cc.v2(o - (5 + i), n + (i + 5))), cc.moveTo(.03, cc.v2(o + (2 + i), n - (8 + i))))) : this.shakeTween.to(.03, {
    position: cc.v2(o + 5 * i, n + 7 * i)
  }).to(.03, {
    position: cc.v2(o - 6 * i, n + 7 * i)
  }).to(.03, {
    position: cc.v2(o - 13 * i, n + 3 * i)
  }).to(.03, {
    position: cc.v2(o + 3 * i, n - 6 * i)
  }).to(.03, {
    position: cc.v2(o - 5 * i, n + 5 * i)
  }).to(.03, {
    position: cc.v2(o + 2 * i, n - 8 * i)
  }), this.shakeTween.to(.03, {
    position: cc.v2(o - (3 + i), n - (5 + i))
  }).to(.03, {
    position: cc.v2(o + (3 + i), n + (i + 5))
  }).to(.03, {
    position: cc.v2(o + (0 + i), n + (i + 0))
  }).call(function () {
    e.setPosition(o, n);
  }).start();
}, a([e], c));

function c() {
  return null !== r && r.apply(this, arguments) || this;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,