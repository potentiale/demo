
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Summoned.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1e93f//bRlK/KKfNads9xN+', 'Summoned');
// scripts/Summoned.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    c = e("AIState"),
    l = e("AISummoned"),
    p = e("LivingThingBase"),
    t = cc._decorator,
    e = t.ccclass,
    e = (t.property, cc.v2(), r = p["default"], i(d, r), d.prototype.setPursuitTarget = function (e) {
  var t = this;
  this.target = e;
  e = this.node.getComponent(l["default"]);
  e || (e = this.node.addComponent(l["default"])).initState(this), this._isActive = !0, this.myFSM = e, this.myFSM.setAIState(c.StateType.Move), this.scheduleOnce(function () {
    t.node.destroy();
  }, this.fadeTime);
}, d.prototype.update = function () {}, d.prototype.getZIndex = function () {
  this.node.zIndex = +s["default"].MapClr.mapSize.height;
}, a([e], d));

function d() {
  var e = null !== r && r.apply(this, arguments) || this;
  return e.target = null, e.moveSpeed = 0, e.attackNum = 0, e.attackDelta = 0, e.attackRange = 0, e.fadeTime = 0, e._curAttackDelta = 0, e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcU3VtbW9uZWQuanMiXSwibmFtZXMiOlsiZSIsInJlcXVpcmUiLCJ0IiwibW9kdWxlIiwibyIsImV4cG9ydHMiLCJuIiwiaSIsIl9fZXh0ZW5kcyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsImEiLCJfX2RlY29yYXRlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsInMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiYyIsImwiLCJwIiwiY2MiLCJfZGVjb3JhdG9yIiwiY2NjbGFzcyIsInByb3BlcnR5IiwidjIiLCJkIiwic2V0UHVyc3VpdFRhcmdldCIsInRhcmdldCIsIm5vZGUiLCJnZXRDb21wb25lbnQiLCJhZGRDb21wb25lbnQiLCJpbml0U3RhdGUiLCJfaXNBY3RpdmUiLCJteUZTTSIsInNldEFJU3RhdGUiLCJTdGF0ZVR5cGUiLCJNb3ZlIiwic2NoZWR1bGVPbmNlIiwiZGVzdHJveSIsImZhZGVUaW1lIiwidXBkYXRlIiwiZ2V0WkluZGV4IiwiekluZGV4IiwiTWFwQ2xyIiwibWFwU2l6ZSIsImhlaWdodCIsImFwcGx5IiwibW92ZVNwZWVkIiwiYXR0YWNrTnVtIiwiYXR0YWNrRGVsdGEiLCJhdHRhY2tSYW5nZSIsIl9jdXJBdHRhY2tEZWx0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFDLEdBQUNDLE9BQU47QUFDQSxJQUFJQyxDQUFDLEdBQUNDLE1BQU47QUFDQSxJQUFJQyxDQUFDLEdBQUNDLE9BQU47QUFDQTs7QUFBYSxJQUFJQyxFQUFKO0FBQUEsSUFBTUMsQ0FBQyxHQUFDLFVBQU0sU0FBS0MsU0FBWCxLQUF1QkYsRUFBQyxHQUFDLFdB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R0FBOUMsRUFBK0MsS0FBS0MsUUFBcEQsQ0FBaEk7QUFBOEwsQ0FBMVUsRUFBMlVkLENBQUMsQ0FBQ3hCLFNBQUYsQ0FBWXVDLE1BQVosR0FBbUIsWUFBVSxDQUFFLENBQTFXLEVBQTJXZixDQUFDLENBQUN4QixTQUFGLENBQVl3QyxTQUFaLEdBQXNCLFlBQVU7QUFBQyxPQUFLYixJQUFMLENBQVVjLE1BQVYsR0FBaUIsQ0FBQzVCLENBQUMsV0FBRCxDQUFVNkIsTUFBVixDQUFpQkMsT0FBakIsQ0FBeUJDLE1BQTNDO0FBQWtELENBQTliLEVBQStidkMsQ0FBQyxDQUFDLENBQUNsQixDQUFELENBQUQsRUFBS3FDLENBQUwsQ0FBbGMsQ0FBNUc7O0FBQXVqQixTQUFTQSxDQUFULEdBQVk7QUFBQyxNQUFJckMsQ0FBQyxHQUFDLFNBQU9zQixDQUFQLElBQVVBLENBQUMsQ0FBQ29DLEtBQUYsQ0FBUSxJQUFSLEVBQWF0QyxTQUFiLENBQVYsSUFBbUMsSUFBekM7QUFBOEMsU0FBT3BCLENBQUMsQ0FBQ3VDLE1BQUYsR0FBUyxJQUFULEVBQWN2QyxDQUFDLENBQUMyRCxTQUFGLEdBQVksQ0FBMUIsRUFBNEIzRCxDQUFDLENBQUM0RCxTQUFGLEdBQVksQ0FBeEMsRUFBMEM1RCxDQUFDLENBQUM2RCxXQUFGLEdBQWMsQ0FBeEQsRUFBMEQ3RCxDQUFDLENBQUM4RCxXQUFGLEdBQWMsQ0FBeEUsRUFBMEU5RCxDQUFDLENBQUNtRCxRQUFGLEdBQVcsQ0FBckYsRUFBdUZuRCxDQUFDLENBQUMrRCxlQUFGLEdBQWtCLENBQXpHLEVBQTJHL0QsQ0FBbEg7QUFBb0g7O0FBQUFJLENBQUMsV0FBRCxHQUFVSixDQUFWIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZT1yZXF1aXJlO1xudmFyIHQ9bW9kdWxlO1xudmFyIG89ZXhwb3J0cztcblwidXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBvIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBvKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihvLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgbyl9KSxhPXRoaXMmJnRoaXMuX19kZWNvcmF0ZXx8ZnVuY3Rpb24oZSx0LG8sbil7dmFyIGksYT1hcmd1bWVudHMubGVuZ3RoLHI9YTwzP3Q6bnVsbD09PW4/bj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsbyk6bjtpZihcIm9iamVjdFwiPT10eXBlb2YgUmVmbGVjdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSlyPVJlZmxlY3QuZGVjb3JhdGUoZSx0LG8sbik7ZWxzZSBmb3IodmFyIHM9ZS5sZW5ndGgtMTswPD1zO3MtLSkoaT1lW3NdKSYmKHI9KGE8Mz9pKHIpOjM8YT9pKHQsbyxyKTppKHQsbykpfHxyKTtyZXR1cm4gMzxhJiZyJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxvLHIpLHJ9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByLHM9ZShcIkFwcENvbW1vblwiKSxjPWUoXCJBSVN0YXRlXCIpLGw9ZShcIkFJU3VtbW9uZWRcIikscD1lKFwiTGl2aW5nVGhpbmdCYXNlXCIpLHQ9Y2MuX2RlY29yYXRvcixlPXQuY2NjbGFzcyxlPSh0LnByb3BlcnR5LGNjLnYyKCkscj1wLmRlZmF1bHQsaShkLHIpLGQucHJvdG90eXBlLnNldFB1cnN1aXRUYXJnZXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLnRhcmdldD1lO2U9dGhpcy5ub2RlLmdldENvbXBvbmVudChsLmRlZmF1bHQpO2V8fChlPXRoaXMubm9kZS5hZGRDb21wb25lbnQobC5kZWZhdWx0KSkuaW5pdFN0YXRlKHRoaXMpLHRoaXMuX2lzQWN0aXZlPSEwLHRoaXMubXlGU009ZSx0aGlzLm15RlNNLnNldEFJU3RhdGUoYy5TdGF0ZVR5cGUuTW92ZSksdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24oKXt0Lm5vZGUuZGVzdHJveSgpfSx0aGlzLmZhZGVUaW1lKX0sZC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7fSxkLnByb3RvdHlwZS5nZXRaSW5kZXg9ZnVuY3Rpb24oKXt0aGlzLm5vZGUuekluZGV4PStzLmRlZmF1bHQuTWFwQ2xyLm1hcFNpemUuaGVpZ2h0fSxhKFtlXSxkKSk7ZnVuY3Rpb24gZCgpe3ZhciBlPW51bGwhPT1yJiZyLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpcztyZXR1cm4gZS50YXJnZXQ9bnVsbCxlLm1vdmVTcGVlZD0wLGUuYXR0YWNrTnVtPTAsZS5hdHRhY2tEZWx0YT0wLGUuYXR0YWNrUmFuZ2U9MCxlLmZhZGVUaW1lPTAsZS5fY3VyQXR0YWNrRGVsdGE9MCxlfW8uZGVmYXVsdD1lIl19