
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/AINpc.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b655dX2b4hA94bUh9DNf2QB', 'AINpc');
// scripts/AINpc.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    c = e("Cfg"),
    l = e("AIState"),
    p = e("FSMBase"),
    t = cc._decorator,
    e = t.ccclass,
    e = (t.property, r = p["default"], i(d, r), d.prototype.initState = function (e) {
  this._AiParameter = new l.AiParameter(), this._AiParameter.moveSpeed = c.Cfg.Costant.get(1).MoveSpeedMan, this.ower = e, this.statesList[l.StateType.Idle] = new l.IdleState(this), this.statesList[l.StateType.Move] = new l.MoveState(this), this._isActive = !0, this.setAIState(l.StateType.Idle);
}, d.prototype.exitAI = function () {
  this._isActive = !1, this.enabled = !1, this.destroy();
}, d.prototype.update = function (e) {
  s["default"].GScene.isPause || this._isActive && this.ower._isActive && this.currentStateClr.OnUpdate(e);
}, a([e], d));

function d() {
  var e = null !== r && r.apply(this, arguments) || this;
  return e._time = 0, e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcQUlOcGMuanMiXSwibmFtZXMiOlsiZSIsInJlcXVpcmUiLCJ0IiwibW9kdWxlIiwibyIsImV4cG9ydHMiLCJuIiwiaSIsIl9fZXh0ZW5kcyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsImEiLCJfX2RlY29yYXRlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsInMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiYyIsImwiLCJwIiwiY2MiLCJfZGVjb3JhdG9yIiwiY2NjbGFzcyIsInByb3BlcnR5IiwiZCIsImluaXRTdGF0ZSIsIl9BaVBhcmFtZXRlciIsIkFpUGFyYW1ldGVyIiwibW92ZVNwZWVkIiwiQ2ZnIiwiQ29zdGFudCIsImdldCIsIk1vdmVTcGVlZE1hbiIsIm93ZXIiLCJzdGF0ZXNMaXN0IiwiU3RhdGVUeXBlIiwiSWRsZSIsIklkbGVTdGF0ZSIsIk1vdmUiLCJNb3ZlU3RhdGUiLCJfaXNBY3RpdmUiLCJzZXRBSVN0YXRlIiwiZXhpdEFJIiwiZW5hYmxlZCIsImRlc3Ryb3kiLCJ1cGRhdGUiLCJHU2NlbmUiLCJpc1BhdXNlIiwiY3VycmVudFN0YXRlQ2xyIiwiT25VcGRhdGUiLCJhcHBseSIsIl90aW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUMsR0FBQ0MsT0FBTjtBQUNBLElBQUlDLENBQUMsR0FBQ0MsTUFBTjtBQUNBLElBQUlDLENBQUMsR0FBQ0MsT0FBTjtBQUNBOztBQUFhLElBQUlDLEVBQUo7QUFBQSxJQUFNQyxDQUFDLEdBQUMsVUFBTSxTQUFLQyxTQUFYLEtBQXVCRixFQUFDLEdBQUMsV0FBU04sQ0FBVCxFQUFXRSxDQUFYLEVB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LENBQUN2QixTQUFGLENBQVl5QyxNQUFaLEdBQW1CLFlBQVU7QUFBQyxPQUFLRixTQUFMLEdBQWUsQ0FBQyxDQUFoQixFQUFrQixLQUFLRyxPQUFMLEdBQWEsQ0FBQyxDQUFoQyxFQUFrQyxLQUFLQyxPQUFMLEVBQWxDO0FBQWlELENBQWxhLEVBQW1hcEIsQ0FBQyxDQUFDdkIsU0FBRixDQUFZNEMsTUFBWixHQUFtQixVQUFTekQsQ0FBVCxFQUFXO0FBQUMwQixFQUFBQSxDQUFDLFdBQUQsQ0FBVWdDLE1BQVYsQ0FBaUJDLE9BQWpCLElBQTBCLEtBQUtQLFNBQUwsSUFBZ0IsS0FBS1AsSUFBTCxDQUFVTyxTQUExQixJQUFxQyxLQUFLUSxlQUFMLENBQXFCQyxRQUFyQixDQUE4QjdELENBQTlCLENBQS9EO0FBQWdHLENBQWxpQixFQUFtaUJrQixDQUFDLENBQUMsQ0FBQ2xCLENBQUQsQ0FBRCxFQUFLb0MsQ0FBTCxDQUF0aUIsQ0FBN0Y7O0FBQTRvQixTQUFTQSxDQUFULEdBQVk7QUFBQyxNQUFJcEMsQ0FBQyxHQUFDLFNBQU9zQixDQUFQLElBQVVBLENBQUMsQ0FBQ3dDLEtBQUYsQ0FBUSxJQUFSLEVBQWExQyxTQUFiLENBQVYsSUFBbUMsSUFBekM7QUFBOEMsU0FBT3BCLENBQUMsQ0FBQytELEtBQUYsR0FBUSxDQUFSLEVBQVUvRCxDQUFqQjtBQUFtQjs7QUFBQUksQ0FBQyxXQUFELEdBQVVKLENBQVYiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBlPXJlcXVpcmU7XG52YXIgdD1tb2R1bGU7XG52YXIgbz1leHBvcnRzO1xuXCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG8gaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG8oKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KG8ucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyBvKX0pLGE9dGhpcyYmdGhpcy5fX2RlY29yYXRlfHxmdW5jdGlvbihlLHQsbyxuKXt2YXIgaSxhPWFyZ3VtZW50cy5sZW5ndGgscj1hPDM/dDpudWxsPT09bj9uPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxvKTpuO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBSZWZsZWN0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBSZWZsZWN0LmRlY29yYXRlKXI9UmVmbGVjdC5kZWNvcmF0ZShlLHQsbyxuKTtlbHNlIGZvcih2YXIgcz1lLmxlbmd0aC0xOzA8PXM7cy0tKShpPWVbc10pJiYocj0oYTwzP2kocik6MzxhP2kodCxvLHIpOmkodCxvKSl8fHIpO3JldHVybiAzPGEmJnImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8scikscn07T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHIscz1lKFwiQXBwQ29tbW9uXCIpLGM9ZShcIkNmZ1wiKSxsPWUoXCJBSVN0YXRlXCIpLHA9ZShcIkZTTUJhc2VcIiksdD1jYy5fZGVjb3JhdG9yLGU9dC5jY2NsYXNzLGU9KHQucHJvcGVydHkscj1wLmRlZmF1bHQsaShkLHIpLGQucHJvdG90eXBlLmluaXRTdGF0ZT1mdW5jdGlvbihlKXt0aGlzLl9BaVBhcmFtZXRlcj1uZXcgbC5BaVBhcmFtZXRlcix0aGlzLl9BaVBhcmFtZXRlci5tb3ZlU3BlZWQ9Yy5DZmcuQ29zdGFudC5nZXQoMSkuTW92ZVNwZWVkTWFuLHRoaXMub3dlcj1lLHRoaXMuc3RhdGVzTGlzdFtsLlN0YXRlVHlwZS5JZGxlXT1uZXcgbC5JZGxlU3RhdGUodGhpcyksdGhpcy5zdGF0ZXNMaXN0W2wuU3RhdGVUeXBlLk1vdmVdPW5ldyBsLk1vdmVTdGF0ZSh0aGlzKSx0aGlzLl9pc0FjdGl2ZT0hMCx0aGlzLnNldEFJU3RhdGUobC5TdGF0ZVR5cGUuSWRsZSl9LGQucHJvdG90eXBlLmV4aXRBST1mdW5jdGlvbigpe3RoaXMuX2lzQWN0aXZlPSExLHRoaXMuZW5hYmxlZD0hMSx0aGlzLmRlc3Ryb3koKX0sZC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUpe3MuZGVmYXVsdC5HU2NlbmUuaXNQYXVzZXx8dGhpcy5faXNBY3RpdmUmJnRoaXMub3dlci5faXNBY3RpdmUmJnRoaXMuY3VycmVudFN0YXRlQ2xyLk9uVXBkYXRlKGUpfSxhKFtlXSxkKSk7ZnVuY3Rpb24gZCgpe3ZhciBlPW51bGwhPT1yJiZyLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpcztyZXR1cm4gZS5fdGltZT0wLGV9by5kZWZhdWx0PWUiXX0=