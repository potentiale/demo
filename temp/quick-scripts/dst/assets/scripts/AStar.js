
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/AStar.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6ab1aHXEuRGubwVvu2klnRk', 'AStar');
// scripts/AStar.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

Object.defineProperty(o, "__esModule", {
  value: !0
}), o.aStar = void 0;

var n,
    t = (i.prototype.find_path = function (e, t, o, n) {
  var d,
      u = [],
      f = [],
      e = e,
      h = t,
      m = o,
      y = n,
      g = 0,
      _ = 0;
  return u.push([e[0], e[1], 0, Math.abs(h[0] - e[0]) + Math.abs(h[1] - e[1]), null]), function e(t) {
    for (var o, n, i = 0, a = [{
      x: o = (n = {
        x: t[0],
        y: t[1]
      }).x,
      y: (n = n.y) - 1
    }, {
      x: o + 1,
      y: n
    }, {
      x: o,
      y: n + 1
    }, {
      x: o - 1,
      y: n
    }], r = 0; r < a.length; r++) {
      var s = a[r].x,
          c = a[r].y;

      if (s == t[0] || c == t[1] || !m[s] || !m[t[0]] || m[s][t[1]] == y || m[t[0]][c] == y) {
        if (s == h[0] && c == h[1]) {
          u.push([s, c, g, _, t]);

          for (var l = [], p = t; l.unshift(p), (p = p[4]) && null != p[4];) {
            ;
          }

          return l;
        }

        m[s] && m[s][c] && m[s][c] == y && -1 == S(u, [s, c]) && -1 == S(f, [s, c]) && (g = s == t[0] || c == t[1] ? t[2] + 1 : t[2] + 1.4, d = Math.sqrt((h[0] - s) * (h[0] - s) + (h[1] - c) * (h[1] - c)), _ = g + d, u.push([s, c, g, _, t]), i++);
      }
    }

    return f.push(u.shift()), (n = u[0] && u[0][4] == t[4] && 0 == i ? v(u, t) : (C(u), u[0])) ? e(n) : [];
  }(u[0]);
}, i),
    v = function v(e, t) {
  void 0 === e && (e = null), void 0 === t && (t = null);

  for (var o = 0; o < e.length; o++) {
    if (t && e[o][4] == t[4]) return e[o];
  }

  return t[4] ? v(t[4]) : null;
},
    C = (n = function n(e, t) {
  return e[3] - t[3];
}, function (e) {
  e.sort(n);
}),
    S = function S(e, t) {
  for (var o = 0; o < e.length; o++) {
    if (e[o][0] == t[0] && e[o][1] == t[1]) return o;
  }

  return -1;
};

function i() {}

o.aStar = new t();

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcQVN0YXIuanMiXSwibmFtZXMiOlsiZSIsInJlcXVpcmUiLCJ0IiwibW9kdWxlIiwibyIsImV4cG9ydHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiYVN0YXIiLCJuIiwiaSIsInByb3RvdHlwZSIsImZpbmRfcGF0aCIsImQiLCJ1IiwiZiIsImgiLCJtIiwieSIsImciLCJfIiwicHVzaCIsIk1hdGgiLCJhYnMiLCJhIiwieCIsInIiLCJsZW5ndGgiLCJzIiwiYyIsImwiLCJwIiwidW5zaGlmdCIsIlMiLCJzcXJ0Iiwic2hpZnQiLCJ2IiwiQyIsInNvcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBQyxHQUFDQyxPQUFOO0FBQ0EsSUFBSUMsQ0FBQyxHQUFDQyxNQUFOO0FBQ0EsSUFBSUMsQ0FBQyxHQUFDQyxPQUFOO0FBQ0E7O0FBQWFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkgsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUM7QUFBQ0ksRUFBQUEsS0FBSyxFQUFDLENBQUM7QUFBUixDQUFyQyxHQUFpREosQ0FBQyxDQUFDSyxLQUFGLEdBQVEsS0FBSyxDQUE5RDs7QUFBZ0UsSUFBSUMsQ0FBSjtBQUFBLElBQU1SLENBQUMsSUFBRVMsQ0FBQyxDQUFDQyxTQUFGLENBQVlDLFNBQVosR0FBc0IsVUFBU2IsQ0FBVCxFQUFXRSxDQUFYLEVBQWFFLENBQWIsRUFBZU0sQ0FBZixFQUFpQjtBQUFDLE1BQUlJLENBQUo7QUFBQSxNQUFNQyxDQUFDLEdBQUMsRUFBUjtBQUFBLE1BQVdDLENBQUMsR0FBQyxFQUFiO0FBQUEsTUFBZ0JoQixDQUFDLEdBQUNBLENBQWxCO0FBQUEsTUFBb0JpQixDQUFDLEdBQUNmLENBQXRCO0FBQUEsTUFBd0JnQixDQUFDLEdBQUNkLENBQTFCO0FBQUEsTUFBNEJlLENBQUMsR0FBQ1QsQ0FBOUI7QUFBQSxNQUFnQ1UsQ0FBQyxHQUFDLENBQWxDO0FBQUEsTUFBb0NDLENBQUMsR0FBQyxDQUF0QztBQUF3QyxTQUFPTixDQUFDLENBQUNPLElBQUYsQ0FBTyxDQUFDdEIsQ0FBQyxDQUFDLENBQUQsQ0FBRixFQUFNQSxDQUFDLENBQUMsQ0FBRCxDQUFQLEVBQVcsQ0FBWCxFQUFhdUIsSUFBSSxDQUFDQyxHQUFMLENBQVNQLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBS2pCLENBQUMsQ0FBQyxDQUFELENBQWYsSUFBb0J1QixJQUFJLENBQUNDLEdBQUwsQ0FBU1AsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLakIsQ0FBQyxDQUFDLENBQUQsQ0FBZixDQUFqQyxFQUFxRCxJQUFyRCxDQUFQLEdBQW1FLFNBQVNBLENBQVQsQ0FBV0UsQ0FBWCxFQUFhO0FBQUMsU0FBSSxJQUFJRSxDQUFKLEVBQU1NLENBQU4sRUFBUUMsQ0FBQyxHQUFDLENBQVYsRUFBWWMsQ0FBQyxHQUFDLENBQUM7QUFBQ0MsTUFBQUEsQ0FBQyxFQUFDdEIsQ0FBQyxHQUFDLENBQUNNLENBQUMsR0FBQztBQUFDZ0IsUUFBQUEsQ0FBQyxFQUFDeEIsQ0FBQyxDQUFDLENBQUQsQ0FBSjtBQUFRaUIsUUFBQUEsQ0FBQyxFQUFDakIsQ0FBQyxDQUFDLENBQUQ7QUFBWCxPQUFILEVBQW9Cd0IsQ0FBekI7QUFBMkJQLE1BQUFBLENBQUMsRUFBQyxDQUFDVCxDQUFDLEdBQUNBLENBQUMsQ0FBQ1MsQ0FBTCxJQUFRO0FBQXJDLEtBQUQsRUFBeUM7QUFBQ08sTUFBQUEsQ0FBQyxFQUFDdEIsQ0FBQyxHQUFDLENBQUw7QUFBT2UsTUFBQUEsQ0FBQyxFQUFDVDtBQUFULEtBQXpDLEVBQXFEO0FBQUNnQixNQUFBQSxDQUFDLEVBQUN0QixDQUFIO0FBQUtlLE1BQUFBLENBQUMsRUFBQ1QsQ0FBQyxHQUFDO0FBQVQsS0FBckQsRUFBaUU7QUFBQ2dCLE1BQUFBLENBQUMsRUFBQ3RCLENBQUMsR0FBQyxDQUFMO0FBQU9lLE1BQUFBLENBQUMsRUFBQ1Q7QUFBVCxLQUFqRSxDQUFkLEVBQTRGaUIsQ0FBQyxHQUFDLENBQWxHLEVBQW9HQSxDQUFDLEdBQUNGLENBQUMsQ0FBQ0csTUFBeEcsRUFBK0dELENBQUMsRUFBaEgsRUFBbUg7QUFBQyxVQUFJRSxDQUFDLEdBQUNKLENBQUMsQ0FBQ0UsQ0FBRCxDQUFELENBQUtELENBQVg7QUFBQSxVQUFhSSxDQUFDLEdBQUNMLENBQUMsQ0FBQ0UsQ0FBRCxDQUFELENBQUtSLENBQXBCOztBQUFzQixVQUFHVSxDQUFDLElBQUUzQixDQUFDLENBQUMsQ0FBRCxDQUFKLElBQVM0QixDQUFDLElBQUU1QixDQUFDLENBQUMsQ0FBRCxDQUFiLElBQWtCLENBQUNnQixDQUFDLENBQUNXLENBQUQsQ0FBcEIsSUFBeUIsQ0FBQ1gsQ0FBQyxDQUFDaEIsQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUEzQixJQUFtQ2dCLENBQUMsQ0FBQ1csQ0FBRCxDQUFELENBQUszQixDQUFDLENBQUMsQ0FBRCxDQUFOLEtBQVlpQixDQUEvQyxJQUFrREQsQ0FBQyxDQUFDaEIsQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUFELENBQVE0QixDQUFSLEtBQVlYLENBQWpFLEVBQW1FO0FBQUMsWUFBR1UsQ0FBQyxJQUFFWixDQUFDLENBQUMsQ0FBRCxDQUFKLElBQVNhLENBQUMsSUFBRWIsQ0FBQyxDQUFDLENBQUQsQ0FBaEIsRUFBb0I7QUFBQ0YsVUFBQUEsQ0FBQyxDQUFDTyxJQUFGLENBQU8sQ0FBQ08sQ0FBRCxFQUFHQyxDQUFILEVBQUtWLENBQUwsRUFBT0MsQ0FBUCxFQUFTbkIsQ0FBVCxDQUFQOztBQUFvQixlQUFJLElBQUk2QixDQUFDLEdBQUMsRUFBTixFQUFTQyxDQUFDLEdBQUM5QixDQUFmLEVBQWlCNkIsQ0FBQyxDQUFDRSxPQUFGLENBQVVELENBQVYsR0FBYSxDQUFDQSxDQUFDLEdBQUNBLENBQUMsQ0FBQyxDQUFELENBQUosS0FBVSxRQUFNQSxDQUFDLENBQUMsQ0FBRCxDQUEvQztBQUFvRDtBQUFwRDs7QUFBcUQsaUJBQU9ELENBQVA7QUFBUzs7QUFBQWIsUUFBQUEsQ0FBQyxDQUFDVyxDQUFELENBQUQsSUFBTVgsQ0FBQyxDQUFDVyxDQUFELENBQUQsQ0FBS0MsQ0FBTCxDQUFOLElBQWVaLENBQUMsQ0FBQ1csQ0FBRCxDQUFELENBQUtDLENBQUwsS0FBU1gsQ0FBeEIsSUFBMkIsQ0FBQyxDQUFELElBQUllLENBQUMsQ0FBQ25CLENBQUQsRUFBRyxDQUFDYyxDQUFELEVBQUdDLENBQUgsQ0FBSCxDQUFoQyxJQUEyQyxDQUFDLENBQUQsSUFBSUksQ0FBQyxDQUFDbEIsQ0FBRCxFQUFHLENBQUNhLENBQUQsRUFBR0MsQ0FBSCxDQUFILENBQWhELEtBQTREVixDQUFDLEdBQUNTLENBQUMsSUFBRTNCLENBQUMsQ0FBQyxDQUFELENBQUosSUFBUzRCLENBQUMsSUFBRTVCLENBQUMsQ0FBQyxDQUFELENBQWIsR0FBaUJBLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUF0QixHQUF3QkEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLEdBQS9CLEVBQW1DWSxDQUFDLEdBQUNTLElBQUksQ0FBQ1ksSUFBTCxDQUFVLENBQUNsQixDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUtZLENBQU4sS0FBVVosQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLWSxDQUFmLElBQWtCLENBQUNaLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBS2EsQ0FBTixLQUFVYixDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUthLENBQWYsQ0FBNUIsQ0FBckMsRUFBb0ZULENBQUMsR0FBQ0QsQ0FBQyxHQUFDTixDQUF4RixFQUEwRkMsQ0FBQyxDQUFDTyxJQUFGLENBQU8sQ0FBQ08sQ0FBRCxFQUFHQyxDQUFILEVBQUtWLENBQUwsRUFBT0MsQ0FBUCxFQUFTbkIsQ0FBVCxDQUFQLENBQTFGLEVBQThHUyxDQUFDLEVBQTNLO0FBQStLO0FBQUM7O0FBQUEsV0FBT0ssQ0FBQyxDQUFDTSxJQUFGLENBQU9QLENBQUMsQ0FBQ3FCLEtBQUYsRUFBUCxHQUFrQixDQUFDMUIsQ0FBQyxHQUFDSyxDQUFDLENBQUMsQ0FBRCxDQUFELElBQU1BLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxDQUFMLEtBQVNiLENBQUMsQ0FBQyxDQUFELENBQWhCLElBQXFCLEtBQUdTLENBQXhCLEdBQTBCMEIsQ0FBQyxDQUFDdEIsQ0FBRCxFQUFHYixDQUFILENBQTNCLElBQWtDb0MsQ0FBQyxDQUFDdkIsQ0FBRCxDQUFELEVBQUtBLENBQUMsQ0FBQyxDQUFELENBQXhDLENBQUgsSUFBaURmLENBQUMsQ0FBQ1UsQ0FBRCxDQUFsRCxHQUFzRCxFQUEvRTtBQUFrRixHQUFya0IsQ0FBc2tCSyxDQUFDLENBQUMsQ0FBRCxDQUF2a0IsQ0FBMUU7QUFBc3BCLENBQXR1QixFQUF1dUJKLENBQXp1QixDQUFQO0FBQUEsSUFBbXZCMEIsQ0FBQyxHQUFDLFNBQUZBLENBQUUsQ0FBU3JDLENBQVQsRUFBV0UsQ0FBWCxFQUFhO0FBQUMsT0FBSyxDQUFMLEtBQVNGLENBQVQsS0FBYUEsQ0FBQyxHQUFDLElBQWYsR0FBcUIsS0FBSyxDQUFMLEtBQVNFLENBQVQsS0FBYUEsQ0FBQyxHQUFDLElBQWYsQ0FBckI7O0FBQTBDLE9BQUksSUFBSUUsQ0FBQyxHQUFDLENBQVYsRUFBWUEsQ0FBQyxHQUFDSixDQUFDLENBQUM0QixNQUFoQixFQUF1QnhCLENBQUMsRUFBeEI7QUFBMkIsUUFBR0YsQ0FBQyxJQUFFRixDQUFDLENBQUNJLENBQUQsQ0FBRCxDQUFLLENBQUwsS0FBU0YsQ0FBQyxDQUFDLENBQUQsQ0FBaEIsRUFBb0IsT0FBT0YsQ0FBQyxDQUFDSSxDQUFELENBQVI7QUFBL0M7O0FBQTJELFNBQU9GLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBS21DLENBQUMsQ0FBQ25DLENBQUMsQ0FBQyxDQUFELENBQUYsQ0FBTixHQUFhLElBQXBCO0FBQXlCLENBQWo0QjtBQUFBLElBQWs0Qm9DLENBQUMsSUFBRTVCLENBQUMsR0FBQyxXQUFTVixDQUFULEVBQVdFLENBQVgsRUFBYTtBQUFDLFNBQU9GLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBS0UsQ0FBQyxDQUFDLENBQUQsQ0FBYjtBQUFpQixDQUFqQyxFQUFrQyxVQUFTRixDQUFULEVBQVc7QUFBQ0EsRUFBQUEsQ0FBQyxDQUFDdUMsSUFBRixDQUFPN0IsQ0FBUDtBQUFVLENBQTFELENBQW40QjtBQUFBLElBQSs3QndCLENBQUMsR0FBQyxTQUFGQSxDQUFFLENBQVNsQyxDQUFULEVBQVdFLENBQVgsRUFBYTtBQUFDLE9BQUksSUFBSUUsQ0FBQyxHQUFDLENBQVYsRUFBWUEsQ0FBQyxHQUFDSixDQUFDLENBQUM0QixNQUFoQixFQUF1QnhCLENBQUMsRUFBeEI7QUFBMkIsUUFBR0osQ0FBQyxDQUFDSSxDQUFELENBQUQsQ0FBSyxDQUFMLEtBQVNGLENBQUMsQ0FBQyxDQUFELENBQVYsSUFBZUYsQ0FBQyxDQUFDSSxDQUFELENBQUQsQ0FBSyxDQUFMLEtBQVNGLENBQUMsQ0FBQyxDQUFELENBQTVCLEVBQWdDLE9BQU9FLENBQVA7QUFBM0Q7O0FBQW9FLFNBQU0sQ0FBQyxDQUFQO0FBQVMsQ0FBNWhDOztBQUE2aEMsU0FBU08sQ0FBVCxHQUFZLENBQUU7O0FBQUFQLENBQUMsQ0FBQ0ssS0FBRixHQUFRLElBQUlQLENBQUosRUFBUiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGU9cmVxdWlyZTtcbnZhciB0PW1vZHVsZTtcbnZhciBvPWV4cG9ydHM7XG5cInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmFTdGFyPXZvaWQgMDt2YXIgbix0PShpLnByb3RvdHlwZS5maW5kX3BhdGg9ZnVuY3Rpb24oZSx0LG8sbil7dmFyIGQsdT1bXSxmPVtdLGU9ZSxoPXQsbT1vLHk9bixnPTAsXz0wO3JldHVybiB1LnB1c2goW2VbMF0sZVsxXSwwLE1hdGguYWJzKGhbMF0tZVswXSkrTWF0aC5hYnMoaFsxXS1lWzFdKSxudWxsXSksZnVuY3Rpb24gZSh0KXtmb3IodmFyIG8sbixpPTAsYT1be3g6bz0obj17eDp0WzBdLHk6dFsxXX0pLngseToobj1uLnkpLTF9LHt4Om8rMSx5Om59LHt4Om8seTpuKzF9LHt4Om8tMSx5Om59XSxyPTA7cjxhLmxlbmd0aDtyKyspe3ZhciBzPWFbcl0ueCxjPWFbcl0ueTtpZihzPT10WzBdfHxjPT10WzFdfHwhbVtzXXx8IW1bdFswXV18fG1bc11bdFsxXV09PXl8fG1bdFswXV1bY109PXkpe2lmKHM9PWhbMF0mJmM9PWhbMV0pe3UucHVzaChbcyxjLGcsXyx0XSk7Zm9yKHZhciBsPVtdLHA9dDtsLnVuc2hpZnQocCksKHA9cFs0XSkmJm51bGwhPXBbNF07KTtyZXR1cm4gbH1tW3NdJiZtW3NdW2NdJiZtW3NdW2NdPT15JiYtMT09Uyh1LFtzLGNdKSYmLTE9PVMoZixbcyxjXSkmJihnPXM9PXRbMF18fGM9PXRbMV0/dFsyXSsxOnRbMl0rMS40LGQ9TWF0aC5zcXJ0KChoWzBdLXMpKihoWzBdLXMpKyhoWzFdLWMpKihoWzFdLWMpKSxfPWcrZCx1LnB1c2goW3MsYyxnLF8sdF0pLGkrKyl9fXJldHVybiBmLnB1c2godS5zaGlmdCgpKSwobj11WzBdJiZ1WzBdWzRdPT10WzRdJiYwPT1pP3YodSx0KTooQyh1KSx1WzBdKSk/ZShuKTpbXX0odVswXSl9LGkpLHY9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT10JiYodD1udWxsKTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKylpZih0JiZlW29dWzRdPT10WzRdKXJldHVybiBlW29dO3JldHVybiB0WzRdP3YodFs0XSk6bnVsbH0sQz0obj1mdW5jdGlvbihlLHQpe3JldHVybiBlWzNdLXRbM119LGZ1bmN0aW9uKGUpe2Uuc29ydChuKX0pLFM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKylpZihlW29dWzBdPT10WzBdJiZlW29dWzFdPT10WzFdKXJldHVybiBvO3JldHVybi0xfTtmdW5jdGlvbiBpKCl7fW8uYVN0YXI9bmV3IHQiXX0=