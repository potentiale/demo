
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/pop_Setting.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f4e92cJT+BPmZU2WuXgef5H', 'pop_Setting');
// scripts/pop_Setting.js

"use strict";

var e = require;
var t = module;
var o = exports;
"use strict";

var _n,
    i = void 0 && (void 0).__extends || (_n = function n(e, t) {
  return (_n = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (e, t) {
    e.__proto__ = t;
  } || function (e, t) {
    for (var o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
    }
  })(e, t);
}, function (e, t) {
  function o() {
    this.constructor = e;
  }

  _n(e, t), e.prototype = null === t ? Object.create(t) : (o.prototype = t.prototype, new o());
}),
    a = void 0 && (void 0).__decorate || function (e, t, o, n) {
  var i,
      a = arguments.length,
      r = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, o) : n;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, o, n);else for (var s = e.length - 1; 0 <= s; s--) {
    (i = e[s]) && (r = (a < 3 ? i(r) : 3 < a ? i(t, o, r) : i(t, o)) || r);
  }
  return 3 < a && r && Object.defineProperty(t, o, r), r;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var r,
    s = e("AppCommon"),
    c = e("CCTool"),
    l = e("pop"),
    t = cc._decorator,
    e = t.ccclass,
    e = (t.property, r = l["default"], i(p, r), p.prototype.updateToggle = function (e, t) {
  e.x = t ? 34.5 : -34.5, e.color = t ? cc.color().fromHEX("#3ab743") : cc.color().fromHEX("#5e5e5e");
}, p.prototype.onClickBgm = function () {
  s["default"].data.is_BgmOpen ? (s["default"].data.is_BgmOpen = 0, c.CCTool.Audio.StopBgm()) : (s["default"].data.is_BgmOpen = 1, c.CCTool.Audio.PlayBgm()), s["default"].setlocal("is_BgmOpen", s["default"].data.is_BgmOpen), this.updateToggle(this.nodeArr[0], !!s["default"].data.is_BgmOpen);
}, p.prototype.onClickAudio = function () {
  s["default"].data.is_AudioOpen ? s["default"].data.is_AudioOpen = 0 : s["default"].data.is_AudioOpen = 1, s["default"].setlocal("is_AudioOpen", s["default"].data.is_AudioOpen), this.updateToggle(this.nodeArr[1], !!s["default"].data.is_AudioOpen);
}, p.prototype.onClickShake = function () {
  s["default"].data.is_ShockOpen ? s["default"].data.is_ShockOpen = 0 : s["default"].data.is_ShockOpen = 1, s["default"].setlocal("is_ShockOpen", s["default"].data.is_ShockOpen), this.updateToggle(this.nodeArr[2], !!s["default"].data.is_ShockOpen);
}, a([e], p));

function p() {
  var e = null !== r && r.apply(this, arguments) || this;
  return e._sellID = 0, e.initFun = {
    pop_Setting: function pop_Setting() {
      e.updateToggle(e.nodeArr[0], !!s["default"].data.is_BgmOpen), e.updateToggle(e.nodeArr[1], !!s["default"].data.is_AudioOpen), e.updateToggle(e.nodeArr[2], !!s["default"].data.is_ShockOpen);
    }
  }, e;
}

o["default"] = e;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccG9wX1NldHRpbmcuanMiXSwibmFtZXMiOlsiZSIsInJlcXVpcmUiLCJ0IiwibW9kdWxlIiwibyIsImV4cG9ydHMiLCJuIiwiaSIsIl9fZXh0ZW5kcyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsImEiLCJfX2RlY29yYXRlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsInMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiYyIsImwiLCJjYyIsIl9kZWNvcmF0b3IiLCJjY2NsYXNzIiwicHJvcGVydHkiLCJwIiwidXBkYXRlVG9nZ2xlIiwieCIsImNvbG9yIiwiZnJvbUhFWCIsIm9uQ2xpY2tCZ20iLCJkYXRhIiwiaXNfQmdtT3BlbiIsIkNDVG9vbCIsIkF1ZGlvIiwiU3RvcEJnbSIsIlBsYXlCZ20iLCJzZXRsb2NhbCIsIm5vZGVBcnIiLCJvbkNsaWNrQXVkaW8iLCJpc19BdWRpb09wZW4iLCJvbkNsaWNrU2hha2UiLCJpc19TaG9ja09wZW4iLCJhcHBseSIsIl9zZWxsSUQiLCJpbml0RnVuIiwicG9wX1NldHRpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBQyxHQUFDQyxPQUFOO0FBQ0EsSUFBSUMsQ0FBQyxHQUFDQyxNQUFOO0FBQ0EsSUFBSUMsQ0FBQyxHQUFDQyxPQUFOO0FBQ0E7O0FBQWEsSUFBSUMsRUFBSjtBQUFBLElBQU1DLENBQUMsR0FBQyxVQUFNLFNBQUtDLFNBQVgsS0FBdUJGLEVBQUMsR0FBQyxXQUFTTixDQUFULEVBQVdFLENBQVgsRUFBYTtBQUFDLFNBQU0sQ0FBQ0ksRUFBQyxHQUFDRyxNQUFNLENBQUNDLGNBQVAsSUFBdUI7QUFB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Q0FBVWUsSUFBVixDQUFlVyxZQUFuRCxDQUF2SjtBQUF3TixDQUEzN0IsRUFBNDdCbEMsQ0FBQyxDQUFDLENBQUNsQixDQUFELENBQUQsRUFBS21DLENBQUwsQ0FBLzdCLENBQTdFOztBQUFxaEMsU0FBU0EsQ0FBVCxHQUFZO0FBQUMsTUFBSW5DLENBQUMsR0FBQyxTQUFPc0IsQ0FBUCxJQUFVQSxDQUFDLENBQUMrQixLQUFGLENBQVEsSUFBUixFQUFhakMsU0FBYixDQUFWLElBQW1DLElBQXpDO0FBQThDLFNBQU9wQixDQUFDLENBQUNzRCxPQUFGLEdBQVUsQ0FBVixFQUFZdEQsQ0FBQyxDQUFDdUQsT0FBRixHQUFVO0FBQUNDLElBQUFBLFdBQVcsRUFBQyx1QkFBVTtBQUFDeEQsTUFBQUEsQ0FBQyxDQUFDb0MsWUFBRixDQUFlcEMsQ0FBQyxDQUFDZ0QsT0FBRixDQUFVLENBQVYsQ0FBZixFQUE0QixDQUFDLENBQUN0QixDQUFDLFdBQUQsQ0FBVWUsSUFBVixDQUFlQyxVQUE3QyxHQUF5RDFDLENBQUMsQ0FBQ29DLFlBQUYsQ0FBZXBDLENBQUMsQ0FBQ2dELE9BQUYsQ0FBVSxDQUFWLENBQWYsRUFBNEIsQ0FBQyxDQUFDdEIsQ0FBQyxXQUFELENBQVVlLElBQVYsQ0FBZVMsWUFBN0MsQ0FBekQsRUFBb0hsRCxDQUFDLENBQUNvQyxZQUFGLENBQWVwQyxDQUFDLENBQUNnRCxPQUFGLENBQVUsQ0FBVixDQUFmLEVBQTRCLENBQUMsQ0FBQ3RCLENBQUMsV0FBRCxDQUFVZSxJQUFWLENBQWVXLFlBQTdDLENBQXBIO0FBQStLO0FBQXZNLEdBQXRCLEVBQStOcEQsQ0FBdE87QUFBd087O0FBQUFJLENBQUMsV0FBRCxHQUFVSixDQUFWIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZT1yZXF1aXJlO1xudmFyIHQ9bW9kdWxlO1xudmFyIG89ZXhwb3J0cztcblwidXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBvIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBvKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihvLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgbyl9KSxhPXRoaXMmJnRoaXMuX19kZWNvcmF0ZXx8ZnVuY3Rpb24oZSx0LG8sbil7dmFyIGksYT1hcmd1bWVudHMubGVuZ3RoLHI9YTwzP3Q6bnVsbD09PW4/bj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsbyk6bjtpZihcIm9iamVjdFwiPT10eXBlb2YgUmVmbGVjdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSlyPVJlZmxlY3QuZGVjb3JhdGUoZSx0LG8sbik7ZWxzZSBmb3IodmFyIHM9ZS5sZW5ndGgtMTswPD1zO3MtLSkoaT1lW3NdKSYmKHI9KGE8Mz9pKHIpOjM8YT9pKHQsbyxyKTppKHQsbykpfHxyKTtyZXR1cm4gMzxhJiZyJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxvLHIpLHJ9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByLHM9ZShcIkFwcENvbW1vblwiKSxjPWUoXCJDQ1Rvb2xcIiksbD1lKFwicG9wXCIpLHQ9Y2MuX2RlY29yYXRvcixlPXQuY2NjbGFzcyxlPSh0LnByb3BlcnR5LHI9bC5kZWZhdWx0LGkocCxyKSxwLnByb3RvdHlwZS51cGRhdGVUb2dnbGU9ZnVuY3Rpb24oZSx0KXtlLng9dD8zNC41Oi0zNC41LGUuY29sb3I9dD9jYy5jb2xvcigpLmZyb21IRVgoXCIjM2FiNzQzXCIpOmNjLmNvbG9yKCkuZnJvbUhFWChcIiM1ZTVlNWVcIil9LHAucHJvdG90eXBlLm9uQ2xpY2tCZ209ZnVuY3Rpb24oKXtzLmRlZmF1bHQuZGF0YS5pc19CZ21PcGVuPyhzLmRlZmF1bHQuZGF0YS5pc19CZ21PcGVuPTAsYy5DQ1Rvb2wuQXVkaW8uU3RvcEJnbSgpKToocy5kZWZhdWx0LmRhdGEuaXNfQmdtT3Blbj0xLGMuQ0NUb29sLkF1ZGlvLlBsYXlCZ20oKSkscy5kZWZhdWx0LnNldGxvY2FsKFwiaXNfQmdtT3BlblwiLHMuZGVmYXVsdC5kYXRhLmlzX0JnbU9wZW4pLHRoaXMudXBkYXRlVG9nZ2xlKHRoaXMubm9kZUFyclswXSwhIXMuZGVmYXVsdC5kYXRhLmlzX0JnbU9wZW4pfSxwLnByb3RvdHlwZS5vbkNsaWNrQXVkaW89ZnVuY3Rpb24oKXtzLmRlZmF1bHQuZGF0YS5pc19BdWRpb09wZW4/cy5kZWZhdWx0LmRhdGEuaXNfQXVkaW9PcGVuPTA6cy5kZWZhdWx0LmRhdGEuaXNfQXVkaW9PcGVuPTEscy5kZWZhdWx0LnNldGxvY2FsKFwiaXNfQXVkaW9PcGVuXCIscy5kZWZhdWx0LmRhdGEuaXNfQXVkaW9PcGVuKSx0aGlzLnVwZGF0ZVRvZ2dsZSh0aGlzLm5vZGVBcnJbMV0sISFzLmRlZmF1bHQuZGF0YS5pc19BdWRpb09wZW4pfSxwLnByb3RvdHlwZS5vbkNsaWNrU2hha2U9ZnVuY3Rpb24oKXtzLmRlZmF1bHQuZGF0YS5pc19TaG9ja09wZW4/cy5kZWZhdWx0LmRhdGEuaXNfU2hvY2tPcGVuPTA6cy5kZWZhdWx0LmRhdGEuaXNfU2hvY2tPcGVuPTEscy5kZWZhdWx0LnNldGxvY2FsKFwiaXNfU2hvY2tPcGVuXCIscy5kZWZhdWx0LmRhdGEuaXNfU2hvY2tPcGVuKSx0aGlzLnVwZGF0ZVRvZ2dsZSh0aGlzLm5vZGVBcnJbMl0sISFzLmRlZmF1bHQuZGF0YS5pc19TaG9ja09wZW4pfSxhKFtlXSxwKSk7ZnVuY3Rpb24gcCgpe3ZhciBlPW51bGwhPT1yJiZyLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpcztyZXR1cm4gZS5fc2VsbElEPTAsZS5pbml0RnVuPXtwb3BfU2V0dGluZzpmdW5jdGlvbigpe2UudXBkYXRlVG9nZ2xlKGUubm9kZUFyclswXSwhIXMuZGVmYXVsdC5kYXRhLmlzX0JnbU9wZW4pLGUudXBkYXRlVG9nZ2xlKGUubm9kZUFyclsxXSwhIXMuZGVmYXVsdC5kYXRhLmlzX0F1ZGlvT3BlbiksZS51cGRhdGVUb2dnbGUoZS5ub2RlQXJyWzJdLCEhcy5kZWZhdWx0LmRhdGEuaXNfU2hvY2tPcGVuKX19LGV9by5kZWZhdWx0PWUiXX0=